{"version":3,"file":"index.umd.js","mappings":"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","sources":["webpack://PservClient/webpack/universalModuleDefinition","webpack://PservClient/webpack/bootstrap","webpack://PservClient/webpack/runtime/define property getters","webpack://PservClient/webpack/runtime/hasOwnProperty shorthand","webpack://PservClient/webpack/runtime/make namespace object","webpack://PservClient/./src/EventTarget.ts","webpack://PservClient/./src/AbstractChatClient.ts","webpack://PservClient/./src/IndexedObjectCollection.ts","webpack://PservClient/./src/state-tracker/AsyncUtils.ts","webpack://PservClient/./src/state-tracker/TopicHistoryWindow.ts","webpack://PservClient/./src/state-tracker/RoomMessagesHistory.ts","webpack://PservClient/./src/state-tracker/MessagesManager.ts","webpack://PservClient/./src/state-tracker/RoomsManager.ts","webpack://PservClient/./src/state-tracker/functions.ts","webpack://PservClient/./src/state-tracker/SpacesManager.ts","webpack://PservClient/./src/Permissions.ts","webpack://PservClient/./src/state-tracker/PermissionsManager.ts","webpack://PservClient/./src/state-tracker/EmoticonsManager.ts","webpack://PservClient/./src/state-tracker/UsersManager.ts","webpack://PservClient/./src/state-tracker/RelationshipsManager.ts","webpack://PservClient/./src/state-tracker/ChatStateTracker.ts","webpack://PservClient/./src/WebSocketChatClient.ts","webpack://PservClient/./src/WebApiChatClient.ts","webpack://PservClient/./src/AbstractRestClient.ts","webpack://PservClient/./src/AuthClient.ts","webpack://PservClient/./src/FilesClient.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PservClient\"] = factory();\n\telse\n\t\troot[\"PservClient\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export type EventHandler<EventT> = (ev?: EventT) => void;\r\ntype HandlersMap<EventT> = Map<string, EventHandler<EventT>[]>;\r\n\r\nexport interface ObservableInterface<EventT = any> {\r\n    on(eventName: string, handler: EventHandler<EventT>): this;\r\n    once(eventName: string, handler: EventHandler<EventT>): this;\r\n    off(eventName: string, handler: EventHandler<EventT>): this;\r\n}\r\n\r\nexport class EventTarget<EventT = any> implements ObservableInterface<EventT> {\r\n    protected events: HandlersMap<EventT> = new Map<string, EventHandler<EventT>[]>();\r\n    protected onceEvents: HandlersMap<EventT> = new Map<string, EventHandler<EventT>[]>();\r\n\r\n    public on(eventName: string, handler: EventHandler<EventT>): this {\r\n        this.addHandler(this.events, eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    public once(eventName: string, handler: EventHandler<EventT>): this {\r\n        this.addHandler(this.onceEvents, eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    public off(eventName: string, handler: EventHandler<EventT>): this {\r\n        const index = this.events.get(eventName)?.indexOf(handler);\r\n        if (!index || index < 0) {\r\n            return this;\r\n        }\r\n        this.events.get(eventName).splice(index, 1);\r\n        return this;\r\n    }\r\n\r\n    public emit(eventName: string, event?: EventT): this {\r\n        this.callHandlers(this.events, eventName, event);\r\n        this.callHandlers(this.onceEvents, eventName, event);\r\n        this.onceEvents.delete(eventName);\r\n        return this;\r\n    }\r\n\r\n    private addHandler(map: HandlersMap<EventT>, eventName: string, handler: EventHandler<EventT>): void {\r\n        const handlers = map.get(eventName) ?? [];\r\n        handlers.push(handler);\r\n        map.set(eventName, handlers);\r\n    }\r\n\r\n    private callHandlers(map: HandlersMap<EventT>, eventName: string, event: EventT): void {\r\n        map.get(eventName)?.forEach(callback => callback(event));\r\n    }\r\n}","import {\r\n    Bye,\r\n    GetSession,\r\n    JoinSpace,\r\n    Session,\r\n    SpaceJoined,\r\n    Error as ErrorType,\r\n    SpaceLeft,\r\n    SpaceMemberJoined,\r\n    SpaceMemberLeft,\r\n    SpaceMemberUpdated,\r\n    SpaceDeleted,\r\n    SpaceMembers,\r\n    SpaceRooms,\r\n    NewRole,\r\n    RoomDeleted,\r\n    RoomJoined,\r\n    RoomLeft,\r\n    RoomMemberLeft,\r\n    RoomMemberJoined,\r\n    RoomMembers,\r\n    NewRoom,\r\n    NewTopic,\r\n    TopicDeleted,\r\n    NewMessage,\r\n    GetPermissionOverwrites,\r\n    GetComputedPermissions,\r\n    LeaveSpace,\r\n    CreateSpace,\r\n    DeleteSpace,\r\n    GetSpaceMembers,\r\n    GetSpaceRooms,\r\n    CreateRole,\r\n    DeleteRole,\r\n    AssignRole,\r\n    DeassignRole,\r\n    SetPermissionOverwrites,\r\n    JoinRoom,\r\n    LeaveRoom,\r\n    CreateRoom,\r\n    DeleteRoom,\r\n    GetRoomMembers,\r\n    CreateTopic,\r\n    DeleteTopic,\r\n    CreateMessage,\r\n    Envelope,\r\n    PermissionOverwrites,\r\n    PermissionOverwritesUpdated,\r\n    RoomMemberUpdated,\r\n    UpdateRole,\r\n    RoleUpdated,\r\n    Ack,\r\n    UserUpdated,\r\n    UpdateRoom,\r\n    RoomUpdated,\r\n    UpdateSpace,\r\n    SpaceUpdated,\r\n    PermissionOverwriteTargets,\r\n    GetPermissionOverwriteTargets,\r\n    Owners,\r\n    Ok,\r\n    GetOwners,\r\n    CreateOwner,\r\n    RoleDeleted,\r\n    FollowedTopicUpdated,\r\n    TopicFollowed,\r\n    TopicUnfollowed,\r\n    FollowedTopics,\r\n    FollowTopic,\r\n    UnfollowTopic,\r\n    GetFollowedTopics,\r\n    Messages,\r\n    GetMessages,\r\n    Topics,\r\n    GetTopics,\r\n    TopicUpdated,\r\n    UpdateTopic,\r\n    GetDiscoverableSpaces,\r\n    DiscoverableSpaces,\r\n    CreateEmoticon,\r\n    DeleteEmoticon,\r\n    GetEmoticons,\r\n    Emoticons,\r\n    EmoticonDeleted,\r\n    NewEmoticon, Bans, GetBans, Ban, Unban, Kick, ClientData, GetClientData, SetClientData,\r\n    GetRoomSummary,\r\n    GetSpaceSummary,\r\n    RoomSummaryEvent,\r\n    SpaceSummaryEvent,\r\n    SetCustomNick, Relationships, RelationshipDeleted, NewRelationship, DeleteRelationship, CreateRelationship,\r\n} from \"./types/src/index\";\r\nimport {EventTarget} from \"./EventTarget\";\r\nimport {GetRelationships} from \"./types/src/schemes/commands/GetRelationships\";\r\n\r\ntype ArrayOfPromiseResolvers = [(value: any) => void, (reason?: any) => void];\r\n\r\nexport abstract class AbstractChatClient extends EventTarget {\r\n    protected awaitingResponse: Map<string, ArrayOfPromiseResolvers> = new Map<string, ArrayOfPromiseResolvers>();\r\n    protected sentCounter: number = 0;\r\n\r\n    public abstract send<CommandType extends keyof CommandsMap>\r\n        (commandType: CommandType, commandData: CommandsMap[CommandType][0]): Promise<CommandResult<CommandsMap[CommandType][1]>>;\r\n\r\n    public on<EventName extends keyof EventsMap>\r\n        (eventName: EventName | string, handler: (event: EventsMap[EventName]) => void): this {\r\n        return super.on(eventName, handler);\r\n    }\r\n\r\n    public once<EventName extends keyof EventsMap>\r\n        (eventName: EventName, handler: (event: EventsMap[EventName]) => void): this {\r\n        return super.once(eventName, handler);\r\n    }\r\n\r\n    protected createEnvelope<CommandT>(type: string, data: CommandT): Envelope<CommandT> {\r\n        return {\r\n            type, data, ref: (++this.sentCounter).toString()\r\n        };\r\n    }\r\n\r\n    protected createPromiseFromCommandEnvelope\r\n        <CommandT extends keyof CommandsMap>(envelope: Envelope<CommandsMap[CommandT][0]>):\r\n        Promise<CommandResult<CommandsMap[CommandT][1]>> {\r\n        return new Promise((...args) =>\r\n            this.awaitingResponse.set(envelope.ref as string, args));\r\n    }\r\n\r\n    protected handleIncomingEnvelope(envelope: Envelope): void {\r\n        if (!this.awaitingResponse.has(envelope.ref)) {\r\n            return;\r\n        }\r\n        const isError = envelope.type === 'Error';\r\n        this.awaitingResponse.get(envelope.ref)[0]({\r\n            data: isError ? null : envelope.data,\r\n            error: isError ? envelope.data : null,\r\n        } as CommandResult<any>);\r\n        this.awaitingResponse.delete(envelope.ref);\r\n    }\r\n\r\n    protected handleEnvelopeSendError(envelope: Envelope, error: any): void {\r\n        if (!this.awaitingResponse.has(envelope.ref)) {\r\n            return;\r\n        }\r\n        this.awaitingResponse.get(envelope.ref)[0](error);\r\n        this.awaitingResponse.delete(envelope.ref);\r\n    }\r\n}\r\n\r\nexport type CommandResult<ResultT> = {data?: ResultT, error?: ErrorType};\r\n\r\n/**\r\n * Map of incoming events.\r\n */\r\nexport type EventsMap = {\r\n    // General Events\r\n    Bye: Bye,\r\n    Ok: Ok,\r\n    Error: ErrorType,\r\n    Session: Session,\r\n    Permissions: Permissions,\r\n    PermissionOverwrites: PermissionOverwrites,\r\n    PermissionOverwritesUpdated: PermissionOverwritesUpdated,\r\n    PermissionOverwriteTargets: PermissionOverwriteTargets,\r\n    Owners: Owners,\r\n    NewEmoticon: NewEmoticon,\r\n    EmoticonDeleted: EmoticonDeleted,\r\n    Emoticons: Emoticons,\r\n    Bans: Bans,\r\n    ClientData: ClientData,\r\n    NewRelationship: NewRelationship,\r\n    RelationshipDeleted: RelationshipDeleted,\r\n    Relationships: Relationships,\r\n    // Space events\r\n    DiscoverableSpaces: DiscoverableSpaces,\r\n    SpaceJoined: SpaceJoined,\r\n    SpaceLeft: SpaceLeft,\r\n    SpaceMemberJoined: SpaceMemberJoined,\r\n    SpaceMemberLeft: SpaceMemberLeft,\r\n    SpaceMemberUpdated: SpaceMemberUpdated,\r\n    SpaceUpdated: SpaceUpdated,\r\n    SpaceDeleted: SpaceDeleted,\r\n    SpaceMembers: SpaceMembers,\r\n    SpaceRooms: SpaceRooms,\r\n    NewRole: NewRole,\r\n    RoleDeleted: RoleDeleted,\r\n    RoleUpdated: RoleUpdated,\r\n    SpaceSummaryEvent: SpaceSummaryEvent,\r\n    // Room events\r\n    RoomJoined: RoomJoined,\r\n    RoomLeft: RoomLeft,\r\n    RoomMemberJoined: RoomMemberJoined,\r\n    RoomMemberLeft: RoomMemberLeft,\r\n    RoomMemberUpdated: RoomMemberUpdated,\r\n    RoomMembers: RoomMembers,\r\n    NewRoom: NewRoom,\r\n    RoomDeleted: RoomDeleted,\r\n    RoomUpdated: RoomUpdated,\r\n    RoomSummaryEvent: RoomSummaryEvent,\r\n    // Topic events\r\n    NewTopic: NewTopic,\r\n    TopicDeleted: TopicDeleted,\r\n    NewMessage: NewMessage,\r\n    UserUpdated: UserUpdated,\r\n    TopicFollowed: TopicFollowed,\r\n    TopicUnfollowed: TopicUnfollowed,\r\n    FollowedTopics: FollowedTopics,\r\n    FollowedTopicUpdated: FollowedTopicUpdated,\r\n    Messages: Messages,\r\n    Topics: Topics,\r\n    TopicUpdated: TopicUpdated,\r\n};\r\n\r\n/**\r\n * Map of commands and their corresponding events.\r\n */\r\nexport type CommandsMap = {\r\n    // General commands\r\n    GetSession: [GetSession, EventsMap['Session']],\r\n    SetPermissionOverwrites: [SetPermissionOverwrites, EventsMap['PermissionOverwritesUpdated']],\r\n    GetPermissionOverwrites: [GetPermissionOverwrites, EventsMap['PermissionOverwrites']],\r\n    GetComputedPermissions: [GetComputedPermissions, EventsMap['Permissions']],\r\n    GetPermissionOverwriteTargets: [GetPermissionOverwriteTargets, EventsMap['PermissionOverwriteTargets']],\r\n    GetOwners: [GetOwners, EventsMap['Owners']],\r\n    CreateOwner: [CreateOwner, EventsMap['Owners']],\r\n    DeleteOwner: [CreateOwner, EventsMap['Owners']],\r\n    CreateEmoticon: [CreateEmoticon, EventsMap['NewEmoticon']],\r\n    DeleteEmoticon: [DeleteEmoticon, EventsMap['EmoticonDeleted']],\r\n    GetEmoticons: [GetEmoticons, EventsMap['Emoticons']],\r\n    GetBans: [GetBans, EventsMap['Bans']],\r\n    Ban: [Ban, EventsMap['Ok']],\r\n    Unban: [Unban, EventsMap['Ok']],\r\n    Kick: [Kick, EventsMap['Ok']],\r\n    GetClientData: [GetClientData, EventsMap['ClientData']],\r\n    SetClientData: [SetClientData, EventsMap['Ok']],\r\n    DeleteRelationship: [DeleteRelationship, EventsMap['RelationshipDeleted']],\r\n    CreateRelationship: [CreateRelationship, EventsMap['NewRelationship']],\r\n    GetRelationships: [GetRelationships, EventsMap['Relationships']],\r\n    // Space commands\r\n    GetDiscoverableSpaces: [GetDiscoverableSpaces, EventsMap['DiscoverableSpaces']],\r\n    JoinSpace: [JoinSpace, EventsMap['SpaceJoined']],\r\n    LeaveSpace: [LeaveSpace, EventsMap['SpaceLeft']],\r\n    CreateSpace: [CreateSpace, EventsMap['SpaceJoined']],\r\n    UpdateSpace: [UpdateSpace, EventsMap['SpaceUpdated']],\r\n    DeleteSpace: [DeleteSpace, EventsMap['SpaceDeleted']],\r\n    GetSpaceMembers: [GetSpaceMembers, EventsMap['SpaceMembers']],\r\n    GetSpaceRooms: [GetSpaceRooms, EventsMap['SpaceRooms']],\r\n    CreateRole: [CreateRole, EventsMap['NewRole']],\r\n    DeleteRole: [DeleteRole, EventsMap['RoleDeleted']],\r\n    UpdateRole: [UpdateRole, EventsMap['RoleUpdated']],\r\n    AssignRole: [AssignRole, EventsMap['SpaceMemberUpdated'] | EventsMap['RoomMemberUpdated']],\r\n    DeassignRole: [DeassignRole, EventsMap['SpaceMemberUpdated'] | EventsMap['RoomMemberUpdated']],\r\n    GetSpaceSummary: [GetSpaceSummary, EventsMap['SpaceSummaryEvent']],\r\n    SetCustomNick: [SetCustomNick, EventsMap['SpaceMemberUpdated']],\r\n    // Room commands\r\n    JoinRoom: [JoinRoom, EventsMap['RoomJoined']],\r\n    LeaveRoom: [LeaveRoom, EventsMap['RoomLeft']],\r\n    CreateRoom: [CreateRoom, EventsMap['RoomJoined']],\r\n    DeleteRoom: [DeleteRoom, EventsMap['RoomDeleted']],\r\n    UpdateRoom: [UpdateRoom, EventsMap['RoomUpdated']],\r\n    GetRoomMembers: [GetRoomMembers, EventsMap['RoomMembers']],\r\n    GetRoomSummary: [GetRoomSummary, EventsMap['RoomSummaryEvent']],\r\n    // Topic commands\r\n    CreateTopic: [CreateTopic, EventsMap['NewTopic']],\r\n    DeleteTopic: [DeleteTopic, EventsMap['TopicDeleted']],\r\n    CreateMessage: [CreateMessage, EventsMap['NewMessage']],\r\n    Ack: [Ack, EventsMap['FollowedTopicUpdated'] | EventsMap['Ok']],\r\n    FollowTopic: [FollowTopic, EventsMap['TopicFollowed']],\r\n    UnfollowTopic: [UnfollowTopic, EventsMap['TopicUnfollowed']],\r\n    GetFollowedTopics: [GetFollowedTopics, EventsMap['FollowedTopics']],\r\n    GetMessages: [GetMessages, EventsMap['Messages']],\r\n    GetTopics: [GetTopics, EventsMap['Topics']],\r\n    UpdateTopic: [UpdateTopic, EventsMap['TopicUpdated']],\r\n}","import {EventTarget, ObservableInterface} from \"./EventTarget\";\r\n\r\nexport class IndexedCollection<KeyT, ValueT> {\r\n    protected _items: Map<KeyT, ValueT> = new Map();\r\n    protected _mutationCounter: number = 0;\r\n\r\n    public constructor(items: [key: KeyT, value: ValueT][] = []) {\r\n        this.set(...items);\r\n    }\r\n\r\n    public get mutationCounter(): number {\r\n        return this._mutationCounter;\r\n    }\r\n\r\n    public get items(): Map<KeyT, ValueT> {\r\n        return this._items;\r\n    }\r\n\r\n    public get length(): number {\r\n        return this._items.size;\r\n    }\r\n\r\n    public set(...items: [KeyT, ValueT][]): void {\r\n        this._mutationCounter++;\r\n        for (const item of items) {\r\n            this._items.set(item[0], item[1]);\r\n        }\r\n    }\r\n\r\n    public get(id: KeyT): ValueT | undefined {\r\n        return this.items.get(id);\r\n    }\r\n\r\n    public has(id: KeyT): boolean {\r\n        return this.items.has(id);\r\n    }\r\n\r\n    public delete(...ids: KeyT[]): void {\r\n        for (const id of ids) {\r\n            this.items.delete(id);\r\n        }\r\n    }\r\n\r\n    public deleteAll(): void {\r\n        this.items.clear();\r\n    }\r\n\r\n    public findBy(field: keyof ValueT, valueToFind: any, limit: number = null): IndexedCollection<KeyT, ValueT> {\r\n        const result = new IndexedCollection<KeyT, ValueT>();\r\n        let item;\r\n        while (!(item = this.items.entries().next().value).done) {\r\n            if (limit && result.length === limit) {\r\n                break;\r\n            }\r\n            if (item[1][field] === valueToFind) {\r\n                result.set(item);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class IndexedObjectCollection<T> {\r\n    protected _items: IndexedCollection<string, T>;\r\n\r\n    public constructor(\r\n        public readonly id: keyof T | ((item: T) => any),\r\n        items: T[] = [],\r\n    ) {\r\n        this._items = new IndexedCollection<string, T>();\r\n        this.set(...items);\r\n    }\r\n\r\n    public get items(): T[] {\r\n        return Array.from(this._items.items.values());\r\n    }\r\n\r\n    public get length(): number {\r\n        return this._items.length;\r\n    }\r\n\r\n    public get mutationCounter(): number {\r\n        return this._items.mutationCounter;\r\n    }\r\n\r\n    public set(...items: T[]): void {\r\n        this._items.set(...(items.map(item => [this.getId(item), item] as [string, T])));\r\n    }\r\n\r\n    public get(id: any): T | undefined {\r\n        return this._items.get(id);\r\n    }\r\n\r\n    public getAt(index: number): T | undefined {\r\n        return this.items[index];\r\n    }\r\n\r\n    public has(id: any): boolean {\r\n        return this._items.has(id);\r\n    }\r\n\r\n    public delete(...ids: any[]): void {\r\n        this._items.delete(...ids);\r\n    }\r\n\r\n    public deleteAll(): void {\r\n        this._items.deleteAll();\r\n    }\r\n\r\n    public findBy(field: keyof T, valueToFind: any, limit: number = null): IndexedObjectCollection<T> {\r\n        const result = new IndexedObjectCollection<T>(this.id);\r\n        for (const value of this.items) {\r\n            if (limit && result.length === limit) {\r\n                break;\r\n            }\r\n            if (value[field] === valueToFind) {\r\n                result.set(value);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    protected getId(item: T): any {\r\n        return typeof this.id === 'function' ? this.id(item) : item[this.id];\r\n    }\r\n}\r\n\r\ninterface ObservableCollectionEvent<KeyT> {\r\n    setItems?: KeyT[],\r\n    deletedItems?: KeyT[],\r\n}\r\n\r\nexport class ObservableIndexedCollection<KeyT, ValueT> extends IndexedCollection<KeyT, ValueT> implements ObservableInterface {\r\n    protected eventTarget: EventTarget<ObservableCollectionEvent<KeyT>>;\r\n\r\n    public constructor(items: [key: KeyT, value: ValueT][] = []) {\r\n        super();\r\n        this.eventTarget = new EventTarget<ObservableCollectionEvent<KeyT>>();\r\n        this.set(...items);\r\n    }\r\n\r\n    public set(...items: [KeyT, ValueT][]) {\r\n        if (items.length) {\r\n            super.set(...items);\r\n            this.eventTarget.emit('change', {setItems: items.map(item => item[0])});\r\n        }\r\n    }\r\n\r\n    public delete(...ids: KeyT[]) {\r\n        if (ids.length) {\r\n            super.delete(...ids);\r\n            this.eventTarget.emit('change', {deletedItems: ids});\r\n        }\r\n    }\r\n\r\n    public deleteAll() {\r\n        if (this.length) {\r\n            const ids = this._items.keys();\r\n            super.deleteAll();\r\n            this.eventTarget.emit('change', {deletedItems: Array.from(ids)});\r\n        }\r\n    }\r\n\r\n    public on(eventName: 'change', handler: (ev?: ObservableCollectionEvent<KeyT>) => void): this {\r\n        this.eventTarget.on(eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    public once(eventName: 'change', handler: (ev?: ObservableCollectionEvent<KeyT>) => void): this {\r\n        this.eventTarget.once(eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    public off(eventName: string, handler: (ev?: ObservableCollectionEvent<KeyT>) => void): this {\r\n        this.eventTarget.off(eventName, handler);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class ObservableIndexedObjectCollection<T> extends IndexedObjectCollection<T> implements ObservableInterface {\r\n    protected eventTarget: EventTarget<ObservableCollectionEvent<string>>;\r\n\r\n    public constructor(\r\n        public readonly id: keyof T | ((item: T) => string),\r\n        items: T[] = [],\r\n    ) {\r\n        super(id);\r\n        this.eventTarget = new EventTarget();\r\n        this.set(...items);\r\n    }\r\n\r\n    public set(...items: T[]) {\r\n        if (items.length) {\r\n            super.set(...items);\r\n            this.eventTarget.emit('change', {setItems: items.map(item => this.getId(item))});\r\n        }\r\n    }\r\n\r\n    public delete(...ids: string[]) {\r\n        if (ids.length) {\r\n            super.delete(...ids);\r\n            this.eventTarget.emit('change', {deletedItems: ids});\r\n        }\r\n    }\r\n\r\n    public deleteAll() {\r\n        if (this.length) {\r\n            const ids = this._items.items.keys();\r\n            super.deleteAll();\r\n            this.eventTarget.emit('change', {deletedItems: Array.from(ids)});\r\n        }\r\n    }\r\n\r\n    public on(eventName: 'change', handler: (ev?: ObservableCollectionEvent<string>) => void): this {\r\n        this.eventTarget.on(eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    public once(eventName: 'change', handler: (ev?: ObservableCollectionEvent<string>) => void): this {\r\n        this.eventTarget.once(eventName, handler);\r\n        return this;\r\n    }\r\n\r\n    public off(eventName: string, handler: (ev?: ObservableCollectionEvent<string>) => void): this {\r\n        this.eventTarget.off(eventName, handler);\r\n        return this;\r\n    }\r\n}","import {IndexedCollection} from \"../IndexedObjectCollection\";\r\n\r\nexport class DeferredTask {\r\n    public readonly promise: Promise<void>;\r\n    public resolve: () => void;\r\n\r\n    public constructor() {\r\n        this.promise = new Promise<void>((resolve) => this.resolve = resolve);\r\n    }\r\n}\r\n\r\nexport class PromiseRegistry {\r\n    private promises = new IndexedCollection<string, Promise<any>>();\r\n\r\n    public register<T = any>(promise: Promise<T>, key: string): void {\r\n        this.promises.set([key, promise]);\r\n    }\r\n\r\n    public registerByFunction(fn: () => Promise<any>, key: string): void {\r\n        this.register(fn(), key);\r\n    }\r\n\r\n    public get<T = any>(key: string): Promise<T> | undefined {\r\n        return this.promises.get(key);\r\n    }\r\n\r\n    public has(key: string): boolean {\r\n        return this.promises.has(key);\r\n    }\r\n\r\n    public notExist(key: string): boolean {\r\n        return ! this.has(key);\r\n    }\r\n\r\n    public forget(...keys: string[]): void {\r\n        this.promises.delete(...keys);\r\n    }\r\n\r\n    public forgetAll(): void {\r\n        this.promises.deleteAll();\r\n    }\r\n}","import {Message, NewMessage, Session, Topic} from \"../types/src\";\r\nimport {ChatStateTracker} from \"./ChatStateTracker\";\r\nimport {ObservableIndexedObjectCollection} from \"../IndexedObjectCollection\";\r\n\r\nexport enum WindowState {\r\n    /**\r\n     * The latest messages (those received live) are available in the history window, history has not been fetched.\r\n     */\r\n    LIVE,\r\n\r\n    /**\r\n     * The latest messages has been fetched and are available in the history window.\r\n     */\r\n    LATEST,\r\n\r\n    /**\r\n     * The historical messages have been fetched and are available in the history window.\r\n     * Latest messages are not available and will not be available.\r\n     */\r\n    PAST,\r\n\r\n    /**\r\n     * The oldest messages have been fetched and are available in the history window.\r\n     * Next attempts to fetch previous messages will result with no-op.\r\n     */\r\n    OLDEST,\r\n}\r\n\r\nexport abstract class TraversableRemoteCollection<T> extends ObservableIndexedObjectCollection<T> {\r\n    /**\r\n     * Current mode od collection window. To change mode, call one of available fetch methods.\r\n     */\r\n    public get state(): WindowState {\r\n        return this.currentState;\r\n    }\r\n\r\n    /**\r\n     * Maximum numer of items stored in window.\r\n     * Null for unlimited.\r\n     */\r\n    public limit: number | null = 50;\r\n\r\n    private currentState: WindowState = WindowState.LIVE;\r\n    private fetchingState: WindowState = undefined;\r\n    public oldestId: string = null;\r\n\r\n    public get hasLatest(): boolean {\r\n        return [WindowState.LATEST, WindowState.LIVE].includes(this.state);\r\n    }\r\n\r\n    public get hasOldest(): boolean {\r\n        return this.state === WindowState.OLDEST || this.oldestId !== null && this.has(this.oldestId);\r\n    }\r\n\r\n    public async resetToLatest(): Promise<void> {\r\n        if (this.fetchingState || this.currentState === WindowState.LATEST) {\r\n            return;\r\n        }\r\n\r\n        this.fetchingState = WindowState.LATEST;\r\n\r\n        let result;\r\n\r\n        try {\r\n            result = await this.fetchLatestItems();\r\n        } finally {\r\n            this.fetchingState = undefined;\r\n        }\r\n\r\n        this.deleteAll();\r\n        this.addItems(result, 'tail');\r\n        this.currentState = WindowState.LATEST;\r\n    }\r\n\r\n    public async fetchPrevious(): Promise<void> {\r\n        if (this.fetchingState || this.hasOldest) {\r\n            return;\r\n        }\r\n\r\n        this.fetchingState = WindowState.PAST;\r\n\r\n        let result;\r\n\r\n        try {\r\n            result = await this.fetchItemsBefore();\r\n        } finally {\r\n            this.fetchingState = undefined;\r\n        }\r\n\r\n        if (! result) {\r\n            return this.resetToLatest();\r\n        }\r\n\r\n        if (! result.length) {\r\n            const firstItem = this.getAt(0);\r\n            this.oldestId = firstItem ? this.getId(firstItem) : null;\r\n\r\n            await this.refreshFetchedState();\r\n\r\n            // LATEST state has priority over OLDEST\r\n            if (this.currentState === WindowState.PAST) {\r\n                this.currentState = WindowState.OLDEST;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.addItems(result, 'head');\r\n        await this.refreshFetchedState();\r\n    }\r\n\r\n    public async fetchNext(): Promise<void> {\r\n        if (this.fetchingState || this.hasLatest) {\r\n            return;\r\n        }\r\n\r\n        this.fetchingState = WindowState.PAST;\r\n\r\n        let result;\r\n\r\n        try {\r\n            result = await this.fetchItemsAfter();\r\n        } finally {\r\n            this.fetchingState = undefined;\r\n        }\r\n\r\n        if (! result) {\r\n            await this.resetToLatest();\r\n            return;\r\n        }\r\n\r\n        if (result.length) {\r\n            this.addItems(result, 'tail');\r\n            await this.refreshFetchedState();\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected abstract fetchLatestItems(): Promise<T[]>;\r\n\r\n    protected abstract fetchItemsBefore(): Promise<T[] | null>;\r\n\r\n    protected abstract fetchItemsAfter(): Promise<T[] | null>;\r\n\r\n    protected abstract isLatestItemLoaded(): Promise<boolean>;\r\n\r\n    protected async refreshFetchedState(): Promise<void> {\r\n        this.currentState = (await this.isLatestItemLoaded()) ? WindowState.LATEST : WindowState.PAST;\r\n    }\r\n\r\n    protected addItems(newItems: T[], to: 'head' | 'tail'): void {\r\n        let result;\r\n\r\n        if (to === 'head') {\r\n            result = this.trimItemsArrayToLimit([...newItems, ...this.items], 'tail');\r\n        }\r\n\r\n        if (to === 'tail') {\r\n            result = this.trimItemsArrayToLimit([...this.items, ...newItems], 'head');\r\n        }\r\n\r\n        this.deleteAll();\r\n        this.set(...result);\r\n    }\r\n\r\n    /**\r\n     * Return array with messages of count that matching limit.\r\n     */\r\n    private trimItemsArrayToLimit(items: T[], from: 'head' | 'tail'): T[] {\r\n        if (this.limit === null) {\r\n            return items;\r\n        }\r\n\r\n        if (from === 'head') {\r\n            return items.slice(-this.limit);\r\n        }\r\n\r\n        if (from === 'tail') {\r\n            return items.slice(0, this.limit);\r\n        }\r\n    }\r\n}\r\n\r\nexport class TopicHistoryWindow extends TraversableRemoteCollection<Message> {\r\n    /**\r\n     * Reexported available window modes enum.\r\n     */\r\n    public readonly WindowState: typeof WindowState = WindowState;\r\n\r\n    public constructor(\r\n        private roomId: string,\r\n        private topicId: string,\r\n        private tracker: ChatStateTracker,\r\n    ) {\r\n        super('id');\r\n        this.tracker.client.on('Session', ev => this.handleSession(ev));\r\n        this.tracker.client.on('NewMessage', ev => this.handleNewMessage(ev));\r\n    }\r\n\r\n    /**\r\n     * For internal use.\r\n     * @internal\r\n     */\r\n    public _updateMessageReference(refTopic: Topic): void {\r\n        const refMessage = this.get(refTopic.refMessage.id);\r\n\r\n        if (refMessage) {\r\n            // Update referenced topic ID in message\r\n            this.set({...refMessage, topicRef: refTopic.id});\r\n        }\r\n    }\r\n\r\n    private async handleNewMessage(ev: NewMessage): Promise<void> {\r\n        if (\r\n            [WindowState.LATEST, WindowState.LIVE].includes(this.state)\r\n            && ev.message.location.roomId === this.roomId\r\n            && ev.message.location.topicId === this.topicId\r\n        ) {\r\n            this.addItems([ev.message], 'tail');\r\n        }\r\n    }\r\n\r\n    private handleSession(ev: Session): void {\r\n        const rooms = ev.state.rooms;\r\n\r\n        if (rooms.find(room => room.id === this.roomId)) {\r\n            this.resetToLatest();\r\n        } else {\r\n            this.deleteAll();\r\n        }\r\n    }\r\n\r\n    protected async fetchItemsAfter(): Promise<Message[] | null> {\r\n        const afterId = this.getAt(this.length - 1)?.id;\r\n\r\n        if (! afterId) {\r\n            // If there is no message to refer, fetch latest\r\n            return null;\r\n        }\r\n\r\n        const result = await this.tracker.client.send('GetMessages', {\r\n            location: {roomId: this.roomId, topicId: this.topicId},\r\n            after: afterId,\r\n        });\r\n\r\n        if (result.error) {\r\n            throw new Error(`Cannot fetch messages: ${result.error.message}`);\r\n        }\r\n\r\n        return result.data.messages;\r\n    }\r\n\r\n    protected async fetchItemsBefore(): Promise<Message[] | null> {\r\n        const beforeId = this.getAt(0)?.id;\r\n\r\n        if (! beforeId) {\r\n            // If there is no message to refer, fetch latest\r\n            return null;\r\n        }\r\n\r\n        const result = await this.tracker.client.send('GetMessages', {\r\n            location: {roomId: this.roomId, topicId: this.topicId},\r\n            before: beforeId,\r\n        });\r\n\r\n        if (result.error) {\r\n            throw new Error(`Cannot fetch messages: ${result.error.message}`);\r\n        }\r\n\r\n        return result.data.messages;\r\n    }\r\n\r\n    protected async fetchLatestItems(): Promise<Message[]> {\r\n        const result = await this.tracker.client.send('GetMessages', {\r\n            location: {roomId: this.roomId, topicId: this.topicId},\r\n        });\r\n\r\n        if (result.error) {\r\n            throw new Error(`Cannot fetch messages: ${result.error.message}`);\r\n        }\r\n\r\n        return result.data.messages;\r\n    }\r\n\r\n    private async getTopic(): Promise<Topic | undefined> {\r\n        return (await this.tracker.rooms.getTopics(this.roomId, [this.topicId])).get(this.topicId);\r\n    }\r\n\r\n    private async getLatestMessageId(): Promise<string | undefined> {\r\n        return (await this.getTopic())?.lastMessage?.id;\r\n    }\r\n\r\n    protected async isLatestItemLoaded(): Promise<boolean> {\r\n        const lastMessageId = await this.getLatestMessageId();\r\n        return lastMessageId ? this.has(lastMessageId) : true;\r\n    }\r\n}","import {ChatStateTracker} from \"./ChatStateTracker\";\r\nimport {NewTopic, Room, RoomUpdated, Topic, TopicDeleted} from \"../types/src\";\r\nimport {IndexedCollection,} from \"../IndexedObjectCollection\";\r\nimport {TopicHistoryWindow} from \"./TopicHistoryWindow\";\r\n\r\nexport class RoomMessagesHistory {\r\n    private historyWindows = new IndexedCollection<string, TopicHistoryWindow>();\r\n\r\n    public constructor(\r\n        private room: Room,\r\n        private tracker: ChatStateTracker,\r\n    ) {\r\n        this.tracker.client.on('RoomUpdated', ev => this.handleRoomUpdated(ev));\r\n        this.tracker.client.on('NewTopic', ev => this.handleNewTopic(ev));\r\n        this.tracker.client.on('TopicDeleted', ev => this.handleTopicDeleted(ev));\r\n\r\n        if (this.room.defaultTopic) {\r\n            this.createHistoryWindowForTopic(this.room.defaultTopic);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a history window object for the given topic ID, allowing you to view message history.\r\n     */\r\n    public async getMessagesWindow(topicId: string): Promise<TopicHistoryWindow | undefined> {\r\n        let historyWindow = this.historyWindows.get(topicId);\r\n\r\n        if (! historyWindow) {\r\n            const topic = (await this.tracker.rooms.getTopics(this.room.id, [topicId])).get(topicId);\r\n\r\n            if (topic) {\r\n                this.createHistoryWindowForTopic(topic);\r\n            }\r\n        }\r\n\r\n        return this.historyWindows.get(topicId);\r\n    }\r\n\r\n    private handleRoomUpdated(ev: RoomUpdated): void {\r\n        if (this.room.id === ev.room.id) {\r\n            this.room = ev.room;\r\n\r\n            if (ev.room.defaultTopic) {\r\n                this.createHistoryWindowForTopic(ev.room.defaultTopic);\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleNewTopic(ev: NewTopic): void {\r\n        if (this.room.id === ev.roomId) {\r\n            this.createHistoryWindowForTopic(ev.topic);\r\n        }\r\n    }\r\n\r\n    private handleTopicDeleted(ev: TopicDeleted): void {\r\n        if (this.room.id === ev.location.roomId) {\r\n            this.historyWindows.delete(ev.location.topicId);\r\n        }\r\n    }\r\n\r\n    private createHistoryWindowForTopic(topic: Topic): void {\r\n        if (this.historyWindows.has(topic.id)) {\r\n            return;\r\n        }\r\n\r\n        this.historyWindows.set([topic.id, new TopicHistoryWindow(this.room.id, topic.id, this.tracker)]);\r\n\r\n        // If new topic refers to some message from this room, update other structures\r\n        if (topic.refMessage) {\r\n            const refHistoryWindow = this.historyWindows.get(topic.refMessage.location.topicId);\r\n            refHistoryWindow?._updateMessageReference(topic);\r\n        }\r\n    }\r\n}","import {ChatStateTracker} from \"./ChatStateTracker\";\r\nimport {\r\n    ChatLocation,\r\n    NewMessage,\r\n    FollowedTopic,\r\n    TopicFollowed,\r\n    TopicUnfollowed,\r\n    RoomDeleted,\r\n    RoomLeft,\r\n    TopicDeleted,\r\n    FollowedTopicUpdated, RoomJoined, NewTopic, Session, Room, MessageType,\r\n} from \"../types/src\";\r\nimport {\r\n    IndexedCollection,\r\n    ObservableIndexedObjectCollection\r\n} from \"../IndexedObjectCollection\";\r\nimport {DeferredTask, PromiseRegistry} from \"./AsyncUtils\";\r\nimport {RoomMessagesHistory} from \"./RoomMessagesHistory\";\r\n\r\nexport class MessagesManager {\r\n    private readonly roomHistories = new IndexedCollection<string, RoomMessagesHistory>();\r\n    private readonly followedTopics = new IndexedCollection<string, ObservableIndexedObjectCollection<FollowedTopic>>();\r\n    private readonly followedTopicsPromises = new PromiseRegistry();\r\n    private readonly deferredSession = new DeferredTask();\r\n\r\n    public constructor(private tracker: ChatStateTracker) {\r\n        this.tracker.client.on('Session', ev => this.handleSession(ev));\r\n        this.tracker.client.on('RoomJoined', ev => this.handleRoomJoin(ev));\r\n        this.tracker.client.on('NewTopic', ev => this.handleNewTopic(ev));\r\n        this.tracker.client.on('FollowedTopicUpdated', ev => this.handleFollowedTopicUpdated(ev));\r\n        this.tracker.client.on('TopicFollowed', ev => this.handleTopicFollowed(ev));\r\n        this.tracker.client.on('TopicUnfollowed', ev => this.handleTopicUnfollowed(ev));\r\n        this.tracker.client.on('NewMessage', ev => this.handleNewMessage(ev));\r\n        this.tracker.client.on('RoomDeleted', ev => this.handleRoomDeleted(ev));\r\n        this.tracker.client.on('RoomLeft', ev => this.handleRoomLeft(ev));\r\n        this.tracker.client.on('TopicDeleted', ev => this.handleTopicDeleted(ev));\r\n    }\r\n\r\n    /**\r\n     * Get history manager for given room ID.\r\n     */\r\n    public async getRoomHistory(roomId: string): Promise<RoomMessagesHistory | undefined> {\r\n        await this.deferredSession.promise;\r\n        return this.roomHistories.get(roomId);\r\n    }\r\n\r\n    /**\r\n     * Cache followed topics for all joined rooms in a space and fetch them in bulk if necessary.\r\n     * Then you can get them using getRoomFollowedTopics().\r\n     * @see getRoomFollowedTopics\r\n     */\r\n    public async cacheSpaceFollowedTopics(spaceId: string | null): Promise<void> {\r\n        if (spaceId && ! (await this.tracker.spaces.get()).has(spaceId)) {\r\n            throw new Error(`You are not in space ${spaceId}`);\r\n        }\r\n\r\n        const roomIds = (await this.tracker.rooms.get()).findBy('spaceId', spaceId).items.map(room => room.id);\r\n\r\n        if (! roomIds.length) {\r\n            // We don't need to ping server for followed topics for this space, if user has no joined rooms\r\n            return;\r\n        }\r\n\r\n        const resultPromise = this.tracker.client.send('GetFollowedTopics', {location: {spaceId}});\r\n\r\n        roomIds.forEach(roomId => this.followedTopicsPromises.register(resultPromise, roomId));\r\n\r\n        const result = await resultPromise;\r\n\r\n        if (result.error) {\r\n            throw result.error;\r\n        }\r\n\r\n        this.setFollowedTopicsArray(roomIds, result.data.followedTopics);\r\n    }\r\n\r\n    /**\r\n     * Get followed topics for the given room.\r\n     * @return Undefined if you are not in the room, collection otherwise.\r\n     */\r\n    public async getRoomFollowedTopics(roomId: string): Promise<ObservableIndexedObjectCollection<FollowedTopic> | undefined> {\r\n        if (! (await this.tracker.rooms.get()).has(roomId)) {\r\n            return undefined;\r\n        }\r\n\r\n        if (! this.followedTopics.has(roomId)) {\r\n            if (this.followedTopicsPromises.notExist(roomId)) {\r\n                this.followedTopicsPromises.registerByFunction(async () => {\r\n                    const result = await this.tracker.client.send('GetFollowedTopics', {location: {roomId}});\r\n\r\n                    if (result.error) {\r\n                        throw result.error;\r\n                    }\r\n\r\n                    this.setFollowedTopicsArray([roomId], result.data.followedTopics);\r\n                }, roomId);\r\n            }\r\n\r\n            await this.followedTopicsPromises.get(roomId);\r\n        }\r\n\r\n        return this.followedTopics.get(roomId);\r\n    }\r\n\r\n    /**\r\n     * Batch acknowledge all missed messages from any topics in given room.\r\n     */\r\n    public async ackRoomFollowedTopics(roomId: string): Promise<void> {\r\n        const collection = await this.getRoomFollowedTopics(roomId);\r\n\r\n        if (! collection) {\r\n            return;\r\n        }\r\n\r\n        for (const followedTopic of collection.items) {\r\n            if (followedTopic.missed) {\r\n                await this.tracker.client.send('Ack', {location: followedTopic.location});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate missed messages from any topic in given room.\r\n     * @return Undefined if you are not in room.\r\n     */\r\n    public async calculateRoomMissedMessages(roomId: string): Promise<number | undefined> {\r\n        const collection = await this.getRoomFollowedTopics(roomId);\r\n\r\n        if (collection) {\r\n            return collection.items.reduce(\r\n                (previousValue, currentValue) => previousValue + (currentValue.missed ?? 0),\r\n                0,\r\n            );\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * For internal use. If you want to delete the message, execute a proper command on client object.\r\n     * @internal\r\n     */\r\n    public _deleteByTopicIds(roomId: string, ...topicIds: string[]): void {\r\n        this.followedTopics.get(roomId)?.delete(...topicIds);\r\n    }\r\n\r\n    private createHistoryForNewRoom(room: Room): void {\r\n        this.roomHistories.set([room.id, new RoomMessagesHistory(room, this.tracker)]);\r\n    }\r\n\r\n    private handleNewMessage(ev: NewMessage): void {\r\n        this.updateLocallyFollowedTopicOnNewMessage(ev);\r\n    }\r\n\r\n    private handleFollowedTopicUpdated(ev: FollowedTopicUpdated): void {\r\n        this.followedTopics.get(ev.followedTopic.location.roomId)?.set(ev.followedTopic);\r\n    }\r\n\r\n    private handleTopicFollowed(ev: TopicFollowed): void {\r\n        this.setFollowedTopicsArray([ev.followedTopic.location.roomId], [ev.followedTopic]);\r\n    }\r\n\r\n    private handleTopicUnfollowed(ev: TopicUnfollowed): void {\r\n        this.followedTopics.get(ev.location.roomId)?.delete(ev.location.topicId);\r\n    }\r\n\r\n    private handleRoomDeleted(ev: RoomDeleted): void {\r\n        this.roomHistories.delete(ev.id);\r\n        this.clearRoomFollowedTopicsStructures(ev.id);\r\n    }\r\n\r\n    private handleRoomJoin(ev: RoomJoined): void {\r\n        this.createHistoryForNewRoom(ev.room)\r\n        this.clearRoomFollowedTopicsStructures(ev.room.id);\r\n    }\r\n\r\n    private handleRoomLeft(ev: RoomLeft): void {\r\n        this.roomHistories.delete(ev.id);\r\n        this.clearRoomFollowedTopicsStructures(ev.id);\r\n    }\r\n\r\n    private async handleNewTopic(ev: NewTopic): Promise<void> {\r\n        if (this.followedTopics.has(ev.roomId)) {\r\n            // Check if the new topic is followed by user\r\n            // only if client asked for followed topics list before for this room\r\n            const result = await this.tracker.client.send(\r\n                'GetFollowedTopics',\r\n                {location: {roomId: ev.roomId, topicId: ev.topic.id}},\r\n            );\r\n            const followedTopic = result.data.followedTopics[0];\r\n            if (followedTopic) {\r\n                this.followedTopics.get(ev.roomId).set(followedTopic);\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleTopicDeleted(ev: TopicDeleted): void {\r\n        this.followedTopics.get(ev.location.roomId)?.delete(ev.location.topicId);\r\n    }\r\n\r\n    private handleSession(ev: Session): void {\r\n        this.followedTopics.deleteAll();\r\n        this.followedTopicsPromises.forgetAll();\r\n        this.roomHistories.deleteAll();\r\n        ev.state.rooms.forEach(room => this.createHistoryForNewRoom(room));\r\n        this.deferredSession.resolve();\r\n    }\r\n\r\n    private updateLocallyFollowedTopicOnNewMessage(ev: NewMessage): void {\r\n        const roomFollowedTopics = this.followedTopics.get(ev.message.location.roomId);\r\n        const followedTopic = roomFollowedTopics?.get(ev.message.location.topicId);\r\n        const ephemeralMessageTypes = ['System'] as MessageType[];\r\n\r\n        if (!roomFollowedTopics || !followedTopic || ephemeralMessageTypes.includes(ev.message.type)) {\r\n            // Skip if we don't follow this room or targeted topic or message is ephemeral\r\n            return;\r\n        }\r\n\r\n        const isMe = ev.message.author.user.id === this.tracker.me?.id;\r\n\r\n        let update: Partial<FollowedTopic>;\r\n\r\n        if (isMe) {\r\n            // Reset missed messages count if new message is authored by me\r\n            update = {missed: 0, lastAckMessageId: ev.message.id};\r\n        } else {\r\n            // ...add 1 otherwise\r\n            update = {missed: followedTopic.missed === null ? null : followedTopic.missed + 1};\r\n        }\r\n\r\n        roomFollowedTopics.set({...followedTopic, ...update});\r\n    }\r\n\r\n    private setFollowedTopicsArray(roomIds: string[], followedTopics: FollowedTopic[]): void {\r\n        const roomToTopics: {[roomId: string]: FollowedTopic[]} = {};\r\n\r\n        // Reassign followed topics to limit collection change event emit\r\n        followedTopics.forEach(followedTopic => {\r\n            roomToTopics[followedTopic.location.roomId] ??= [];\r\n            roomToTopics[followedTopic.location.roomId].push(followedTopic);\r\n        });\r\n\r\n        roomIds.forEach(roomId => {\r\n            if (! this.followedTopics.has(roomId)) {\r\n                this.followedTopics.set([roomId, new ObservableIndexedObjectCollection<FollowedTopic>(\r\n                    followedTopic => followedTopic.location.topicId\r\n                )]);\r\n            }\r\n\r\n            if (roomToTopics[roomId]) {\r\n                this.followedTopics.get(roomId).set(...roomToTopics[roomId]);\r\n            }\r\n        });\r\n    }\r\n\r\n    private clearRoomFollowedTopicsStructures(roomId: string): void {\r\n        this.followedTopics.delete(roomId);\r\n        this.followedTopicsPromises.forget(roomId);\r\n    }\r\n}","import {IndexedCollection, ObservableIndexedObjectCollection} from \"../IndexedObjectCollection\";\r\nimport {\r\n    NewMessage,\r\n    NewTopic,\r\n    Room, RoomDeleted,\r\n    RoomJoined, RoomLeft,\r\n    RoomMember, RoomMemberJoined, RoomMemberLeft, RoomMembers,\r\n    RoomMemberUpdated, RoomUpdated, Session, SpaceDeleted, SpaceLeft, SpaceMemberLeft,\r\n    SpaceMemberUpdated,\r\n    Topic,\r\n    TopicDeleted, TopicUpdated,\r\n    UserUpdated,\r\n} from \"../types/src\";\r\nimport {ChatStateTracker} from \"./ChatStateTracker\";\r\nimport {DeferredTask, PromiseRegistry} from \"./AsyncUtils\";\r\nimport {MessagesManager} from \"./MessagesManager\";\r\n\r\nexport class RoomsManager {\r\n    public readonly messages: MessagesManager;\r\n\r\n    private readonly list = new ObservableIndexedObjectCollection<Room>('id');\r\n    private readonly topics = new IndexedCollection<string, ObservableIndexedObjectCollection<Topic>>();\r\n    private readonly members = new IndexedCollection<string, ObservableIndexedObjectCollection<RoomMember>>();\r\n    private readonly deferredSession = new DeferredTask();\r\n    private readonly membersPromises = new PromiseRegistry();\r\n    private readonly topicsPromises = new PromiseRegistry();\r\n\r\n    public constructor(private tracker: ChatStateTracker) {\r\n        this.messages = new MessagesManager(tracker);\r\n\r\n        this.tracker.client.on('NewMessage', ev => this.handleNewMessage(ev));\r\n        this.tracker.client.on('NewTopic', ev => this.handleNewTopic(ev));\r\n        this.tracker.client.on('TopicDeleted', ev => this.handleTopicDeleted(ev));\r\n        this.tracker.client.on('RoomJoined', ev => this.handleRoomJoined(ev));\r\n        this.tracker.client.on('RoomLeft', ev => this.handleRoomLeft(ev));\r\n        this.tracker.client.on('RoomUpdated', ev => this.handleRoomUpdated(ev));\r\n        this.tracker.client.on('RoomDeleted', ev => this.handleRoomDeleted(ev));\r\n        this.tracker.client.on('TopicUpdated', ev => this.handleTopicUpdated(ev));\r\n        this.tracker.client.on('RoomMemberJoined', ev => this.handleRoomMemberJoined(ev));\r\n        this.tracker.client.on('RoomMemberLeft', ev => this.handleRoomMemberLeft(ev));\r\n        this.tracker.client.on('RoomMembers', ev => this.handleRoomMembers(ev));\r\n        this.tracker.client.on('RoomMemberUpdated', ev => this.handleRoomMemberUpdated(ev));\r\n        this.tracker.client.on('SpaceMemberLeft', ev => this.handleSpaceMemberLeft(ev));\r\n        this.tracker.client.on('SpaceMemberUpdated', ev => this.handleSpaceMemberUpdated(ev));\r\n        this.tracker.client.on('SpaceDeleted', ev => this.handleSpaceDeleted(ev));\r\n        this.tracker.client.on('SpaceLeft', ev => this.handleSpaceDeleted(ev));\r\n        this.tracker.client.on('UserUpdated', ev => this.handleUserUpdated(ev));\r\n        this.tracker.client.on('Session', ev => this.handleSession(ev));\r\n    }\r\n\r\n    /**\r\n     * Get collection of room members.\r\n     */\r\n    public async getMembers(roomId: string): Promise<ObservableIndexedObjectCollection<RoomMember> | undefined> {\r\n        if (this.membersPromises.notExist(roomId)) {\r\n            this.membersPromises.registerByFunction(async () => {\r\n                const result = await this.tracker.client.send('GetRoomMembers', {id: roomId});\r\n                if (result.error) {\r\n                    throw result.error;\r\n                }\r\n                this.handleRoomMembers(result.data);\r\n            }, roomId);\r\n        }\r\n\r\n        await this.membersPromises.get(roomId);\r\n        return this.members.get(roomId);\r\n    }\r\n\r\n    /**\r\n     * Get a room member representing the current user.\r\n     */\r\n    public async getMe(roomId: string): Promise<RoomMember | undefined> {\r\n        const userId = (await this.tracker.getMe()).id;\r\n\r\n        if (! this.list.has(roomId)) {\r\n            // User is not in passed room.\r\n            return undefined;\r\n        }\r\n\r\n        const members = await this.getMembers(roomId);\r\n        return members?.items.find(member => (member.user?.id ?? member.spaceMember.user.id) === userId);\r\n    }\r\n\r\n    /**\r\n     * Get collection of all the rooms you are in.\r\n     */\r\n    public async get(): Promise<ObservableIndexedObjectCollection<Room>> {\r\n        await this.deferredSession.promise;\r\n        return this.list;\r\n    }\r\n\r\n    /**\r\n     * Get a collection of locally cached Topic objects for given room.\r\n     * You can pass topic ids as second argument, to try to fetch them from the server.\r\n     */\r\n    public async getTopics(roomId: string, tryToFetchTopicIds?: string[]): Promise<ObservableIndexedObjectCollection<Topic> | undefined> {\r\n        await this.deferredSession.promise;\r\n\r\n        if (tryToFetchTopicIds?.length) {\r\n            // Topic can be fetched if it isn't already cached and fetch is not already in progress\r\n            const canFetch = (topicId: string) => ! this.topics.get(roomId)?.has(topicId) && ! this.topicsPromises.has(roomId + topicId);\r\n            const idsToFetch = tryToFetchTopicIds.filter(canFetch);\r\n\r\n            if (idsToFetch.length) {\r\n                const promise = this.tracker\r\n                    .client\r\n                    .send('GetTopics', {roomId, topicIds: idsToFetch})\r\n                    .then(result => this.topics.get(result.data.location.roomId)?.set(...result.data.topics));\r\n\r\n                idsToFetch.forEach(topicId => this.topicsPromises.register(promise, roomId + topicId));\r\n            }\r\n\r\n            for (const topicId of tryToFetchTopicIds) {\r\n                await this.topicsPromises.get(roomId + topicId);\r\n            }\r\n        }\r\n\r\n        return this.topics.get(roomId);\r\n    }\r\n\r\n    private deleteRoom(...roomIds: string[]): void {\r\n        this.list.delete(...roomIds);\r\n        this.members.delete(...roomIds);\r\n        this.membersPromises.forget(...roomIds);\r\n\r\n        for (const roomId of roomIds) {\r\n            const topicIds: string[] = this.topics.get(roomId)?.items.map(topic => topic.id) ?? [];\r\n            this.messages._deleteByTopicIds(roomId, ...topicIds);\r\n        }\r\n\r\n        this.topics.delete(...roomIds);\r\n    }\r\n\r\n    private deleteRoomsBySpaceId(spaceId: string): void {\r\n        this.deleteRoom(\r\n            ...this.list.findBy('spaceId', spaceId).items.map(room => room.id)\r\n        );\r\n    }\r\n\r\n    private handleSpaceMemberUpdated(ev: SpaceMemberUpdated): void {\r\n        // Update members of rooms related to this space\r\n        for (const room of this.list.findBy('spaceId', ev.spaceId).items) {\r\n            const roomMembers = this.members.get(room.id);\r\n\r\n            if (! roomMembers || ! roomMembers.has(ev.userId)) {\r\n                // Skip update if member list for this room is not loaded\r\n                // or user is not in room\r\n                continue;\r\n            }\r\n\r\n            const roomMember = roomMembers.get(ev.userId);\r\n            const user = roomMember.spaceMember.user;\r\n\r\n            // Update space member but first fill user object (it's null in event object)\r\n            roomMember.spaceMember = {...ev.member, user};\r\n            roomMembers.set(roomMember);\r\n        }\r\n    }\r\n\r\n    private handleSpaceMemberLeft(ev: SpaceMemberLeft): void {\r\n        this.list\r\n            .findBy('spaceId', ev.spaceId).items\r\n            .forEach(room => this.members.get(room.id)?.delete(ev.userId));\r\n    }\r\n\r\n    private handleRoomMemberUpdated(ev: RoomMemberUpdated): void {\r\n        if (! this.members.has(ev.roomId)) {\r\n            // We do not track member list for this room.\r\n            return;\r\n        }\r\n\r\n        const members = this.members.get(ev.roomId);\r\n        const member = members.get(ev.userId);\r\n        const newMember = ev.member;\r\n        const user = member.spaceMember?.user ?? member.user;\r\n\r\n        if (newMember.spaceMember) {\r\n            newMember.spaceMember.user = user;\r\n        } else {\r\n            newMember.user = user;\r\n        }\r\n\r\n        members.set(newMember);\r\n    }\r\n\r\n    private handleSpaceDeleted(ev: SpaceDeleted | SpaceLeft): void {\r\n        this.deleteRoomsBySpaceId(ev.id);\r\n    }\r\n\r\n    private handleTopicDeleted(ev: TopicDeleted): void {\r\n        const collection = this.topics.get(ev.location.roomId);\r\n        collection.delete(ev.location.topicId);\r\n\r\n        const room = this.list.get(ev.location.roomId);\r\n        if (room.defaultTopic?.id === ev.location.topicId) {\r\n            this.list.set({...room, defaultTopic: null});\r\n        }\r\n    }\r\n\r\n    private handleNewTopic(ev: NewTopic): void {\r\n        this.addJoinedRoomTopics(ev.roomId, ev.topic);\r\n    }\r\n\r\n    private addJoinedRoomTopics(roomId: string, ...topics: Topic[]): void {\r\n        if (this.topics.has(roomId)) {\r\n            this.topics.get(roomId).set(...topics);\r\n        } else {\r\n            this.topics.set([roomId, new ObservableIndexedObjectCollection<Topic>('id', topics)]);\r\n        }\r\n    }\r\n\r\n    private handleRoomJoined(ev: RoomJoined): void {\r\n        this.addJoinedRooms(ev.room);\r\n    }\r\n\r\n    private handleRoomUpdated(ev: RoomUpdated): void {\r\n        if (this.list.has(ev.room.id)) {\r\n            this.list.set(ev.room);\r\n        }\r\n    }\r\n\r\n    private handleRoomDeleted(ev: RoomDeleted): void {\r\n        this.deleteRoom(ev.id);\r\n    }\r\n\r\n    private handleTopicUpdated(ev: TopicUpdated): void {\r\n        const room = this.list.get(ev.location.roomId);\r\n\r\n        if (this.topics.get(ev.location.roomId)?.has(ev.topic.id)) {\r\n            this.topics.get(ev.location.roomId).set(ev.topic);\r\n        }\r\n\r\n        if (room.defaultTopic.id === ev.topic.id) {\r\n            room.defaultTopic = ev.topic;\r\n            this.list.set(room);\r\n        }\r\n    }\r\n\r\n    private addJoinedRooms(...rooms: Room[]): void {\r\n        for (const room of rooms) {\r\n            if (room.defaultTopic) {\r\n                this.addJoinedRoomTopics(room.id, room.defaultTopic);\r\n            }\r\n\r\n            if (room.type === 'Pm' && room.recipients) {\r\n                // Treat PM recipients as normal room members.\r\n                // We are registering fake promise in `memberPromises`\r\n                // because GetMembers are not supported for PM rooms.\r\n                this.handleRoomMembers({\r\n                    id: room.id,\r\n                    members: room.recipients.map(user => ({user, spaceMember: null, roles: null})),\r\n                });\r\n                this.membersPromises.register(Promise.resolve(), room.id);\r\n            }\r\n        }\r\n        this.list.set(...rooms);\r\n    }\r\n\r\n    private handleRoomLeft(ev: RoomLeft): void {\r\n        this.deleteRoom(ev.id);\r\n    }\r\n\r\n    private handleRoomMemberJoined(ev: RoomMemberJoined): void {\r\n        if (this.members.has(ev.roomId)) {\r\n            this.members.get(ev.roomId).set(ev.member);\r\n        }\r\n    }\r\n\r\n    private handleRoomMemberLeft(ev: RoomMemberLeft): void {\r\n        if (this.members.has(ev.roomId)) {\r\n            this.members.get(ev.roomId).delete(ev.userId);\r\n        }\r\n    }\r\n\r\n    private handleRoomMembers(ev: RoomMembers): void {\r\n        if (! this.members.has(ev.id)) {\r\n            this.members.set([\r\n                ev.id,\r\n                new ObservableIndexedObjectCollection(\r\n                    member => member.user?.id ?? member.spaceMember.user.id,\r\n                    ev.members,\r\n                )\r\n            ]);\r\n        }\r\n    }\r\n\r\n    private handleSession(ev: Session): void {\r\n        this.list.deleteAll();\r\n        this.topics.deleteAll();\r\n        this.topicsPromises.forgetAll();\r\n        this.members.deleteAll();\r\n        this.membersPromises.forgetAll();\r\n\r\n        this.addJoinedRooms(...ev.state.rooms);\r\n\r\n        this.deferredSession.resolve();\r\n    }\r\n\r\n    private handleUserUpdated(ev: UserUpdated): void {\r\n        this.members.items.forEach((members) => {\r\n            const member = members.get(ev.user.id);\r\n\r\n            if (! member) {\r\n                // Skip room; updated user is not here\r\n                return;\r\n            }\r\n\r\n            const newMember: RoomMember = {...member};\r\n\r\n            if (member.user) {\r\n                newMember.user = ev.user;\r\n            } else {\r\n                newMember.spaceMember.user = ev.user;\r\n            }\r\n\r\n            members.set(newMember);\r\n        });\r\n    }\r\n\r\n    private handleNewMessage(ev: NewMessage): void {\r\n        const topics = this.topics.get(ev.message.location.roomId);\r\n        const topic = topics?.get(ev.message.location.topicId);\r\n\r\n        if (!topic) {\r\n            return; // No topic found, nothing to update\r\n        }\r\n\r\n        const newTopic = {\r\n            ...topic,\r\n            messageCount: topic.messageCount + 1,\r\n            lastMessage: ev.message,\r\n        };\r\n\r\n        topics.set(newTopic);\r\n        const room = this.list.get(ev.message.location.roomId);\r\n\r\n        if (room.defaultTopic?.id === ev.message.location.topicId) {\r\n            this.list.set({ ...room, defaultTopic: newTopic });\r\n        }\r\n    }\r\n}","import {Role, RoomMember, SpaceMember, User} from \"../types/src\";\r\n\r\nexport function reorderRolesOnPriorityUpdate(allRoles: Role[], oldRole: Role, updatedRole: Role): Role[] {\r\n    // If the priority has changed, adjust the rest of roles\r\n    const increased = (updatedRole.priority - oldRole.priority) > 0;\r\n    const decreased = ! increased;\r\n    const changedRoles: Role[] = [];\r\n\r\n    allRoles.forEach(role => {\r\n        if (role.id === updatedRole.id) {\r\n            // Skip the updated role\r\n            return;\r\n        }\r\n        if (increased && oldRole.priority <= role.priority) {\r\n            role.priority--;\r\n            changedRoles.push(role);\r\n        }\r\n        if (decreased && updatedRole.priority <= role.priority) {\r\n            role.priority++;\r\n            changedRoles.push(role);\r\n        }\r\n    });\r\n\r\n    return changedRoles;\r\n}\r\n\r\nexport function extractUserFromMember(member: RoomMember | SpaceMember): User | null {\r\n    return member.user ?? (member as RoomMember).spaceMember?.user;\r\n}","import {ChatStateTracker} from \"./ChatStateTracker\";\r\nimport {IndexedCollection, ObservableIndexedObjectCollection} from \"../IndexedObjectCollection\";\r\nimport {\r\n    NewRole,\r\n    NewRoom,\r\n    Role,\r\n    RoleDeleted,\r\n    RoleUpdated,\r\n    RoomDeleted,\r\n    RoomSummary,\r\n    RoomUpdated,\r\n    Session,\r\n    Space,\r\n    SpaceDeleted,\r\n    SpaceJoined,\r\n    SpaceLeft,\r\n    SpaceMember,\r\n    SpaceMemberJoined,\r\n    SpaceMemberLeft,\r\n    SpaceMembers,\r\n    SpaceMemberUpdated,\r\n    SpaceRooms,\r\n    SpaceUpdated,\r\n    UserUpdated\r\n} from \"../types/src\";\r\nimport {DeferredTask, PromiseRegistry} from \"./AsyncUtils\";\r\nimport {reorderRolesOnPriorityUpdate} from \"./functions\";\r\n\r\nexport class SpacesManager {\r\n    private readonly list = new ObservableIndexedObjectCollection<Space>('id');\r\n    private readonly roles = new IndexedCollection<string, ObservableIndexedObjectCollection<Role>>();\r\n    private readonly rooms = new IndexedCollection<string, ObservableIndexedObjectCollection<RoomSummary>>();\r\n    private readonly roomIdToSpaceId = new IndexedCollection<string, string>();\r\n    private readonly members = new IndexedCollection<string, ObservableIndexedObjectCollection<SpaceMember>>();\r\n    private readonly deferredSession = new DeferredTask();\r\n    private readonly roomsPromises = new PromiseRegistry();\r\n    private readonly membersPromises = new PromiseRegistry();\r\n\r\n    public constructor(private tracker: ChatStateTracker) {\r\n        this.tracker.client.on('NewRoom', ev => this.handleNewRoom(ev));\r\n        this.tracker.client.on('RoomDeleted', ev => this.handleRoomDeleted(ev));\r\n        this.tracker.client.on('RoomUpdated', ev => this.handleRoomUpdated(ev));\r\n        this.tracker.client.on('SpaceDeleted', ev => this.handleSpaceDeleted(ev));\r\n        this.tracker.client.on('SpaceUpdated', ev => this.handleSpaceUpdated(ev));\r\n        this.tracker.client.on('SpaceJoined', ev => this.handleSpaceJoined(ev));\r\n        this.tracker.client.on('SpaceLeft', ev => this.handleSpaceDeleted(ev));\r\n        this.tracker.client.on('SpaceMemberJoined', ev => this.handleSpaceMemberJoined(ev));\r\n        this.tracker.client.on('SpaceMemberLeft', ev => this.handleSpaceMemberLeft(ev));\r\n        this.tracker.client.on('SpaceMembers', ev => this.handleSpaceMembers(ev));\r\n        this.tracker.client.on('SpaceRooms', ev => this.handleSpaceRooms(ev));\r\n        this.tracker.client.on('SpaceMemberUpdated', ev => this.handleSpaceMemberUpdated(ev));\r\n        this.tracker.client.on('UserUpdated', ev => this.handleUserUpdated(ev));\r\n        this.tracker.client.on('NewRole', ev => this.handleNewRole(ev));\r\n        this.tracker.client.on('RoleDeleted', ev => this.handleRoleDeleted(ev));\r\n        this.tracker.client.on('RoleUpdated', ev => this.handleRoleUpdated(ev));\r\n        this.tracker.client.on('Session', ev => this.handleSession(ev));\r\n    }\r\n\r\n    /**\r\n     * Get collection of all the spaces you are in.\r\n     */\r\n    public async get(): Promise<ObservableIndexedObjectCollection<Space>> {\r\n        await this.deferredSession.promise;\r\n        return this.list;\r\n    }\r\n\r\n    /**\r\n     * Get collection of space roles.\r\n     */\r\n    public async getRoles(spaceId: string): Promise<ObservableIndexedObjectCollection<Role> | undefined> {\r\n        await this.deferredSession.promise;\r\n        return this.roles.get(spaceId);\r\n    }\r\n\r\n    /**\r\n     * Get collection of the all available rooms inside given space.\r\n     */\r\n    public async getRooms(spaceId: string): Promise<ObservableIndexedObjectCollection<RoomSummary> | undefined> {\r\n        if (this.roomsPromises.notExist(spaceId)) {\r\n            this.roomsPromises.registerByFunction(async () => {\r\n                const result = await this.tracker.client.send('GetSpaceRooms', {id: spaceId});\r\n                if (result.error) {\r\n                    throw result.error;\r\n                }\r\n                this.handleSpaceRooms(result.data);\r\n            }, spaceId);\r\n        }\r\n\r\n        await this.roomsPromises.get(spaceId);\r\n        return this.rooms.get(spaceId);\r\n    }\r\n\r\n    /**\r\n     * Get collection of space members.\r\n     */\r\n    public async getMembers(spaceId: string): Promise<ObservableIndexedObjectCollection<SpaceMember> | undefined> {\r\n        if (this.membersPromises.notExist(spaceId)) {\r\n            this.membersPromises.registerByFunction(async () => {\r\n                const result = await this.tracker.client.send('GetSpaceMembers', {id: spaceId});\r\n                if (result.error) {\r\n                    throw result.error;\r\n                }\r\n                this.handleSpaceMembers(result.data);\r\n            }, spaceId);\r\n        }\r\n\r\n        await this.membersPromises.get(spaceId);\r\n        return this.members.get(spaceId);\r\n    }\r\n\r\n    /**\r\n     * Get a space member representing the current user.\r\n     */\r\n    public async getMe(spaceId: string): Promise<SpaceMember | undefined> {\r\n        const userId = (await this.tracker.getMe()).id;\r\n\r\n        if (! this.list.has(spaceId)) {\r\n            // User is not in passed space.\r\n            return undefined;\r\n        }\r\n\r\n        const members = await this.getMembers(spaceId);\r\n        return members?.items.find(member => member.user.id === userId);\r\n    }\r\n\r\n    private handleNewRole(ev: NewRole): void {\r\n        const collection = this.roles.get(ev.spaceId);\r\n        collection.set(ev.role);\r\n        this.list.get(ev.spaceId).roles = collection.items;\r\n    }\r\n\r\n    private handleNewRoom(ev: NewRoom): void {\r\n        this.rooms.get(ev.spaceId)?.set(ev.summary);\r\n        this.roomIdToSpaceId.set([ev.summary.id, ev.spaceId]);\r\n    }\r\n\r\n    private handleRoomUpdated(ev: RoomUpdated): void {\r\n        if (ev.room.spaceId && this.rooms.has(ev.room.spaceId)) {\r\n            const rooms = this.rooms.get(ev.room.spaceId);\r\n            rooms.set({\r\n                ...rooms.get(ev.room.id),\r\n                name: ev.room.name,\r\n                description: ev.room.description,\r\n            } as RoomSummary);\r\n        }\r\n    }\r\n\r\n    private async handleRoomDeleted(ev: RoomDeleted): Promise<void> {\r\n        const spaceId = this.roomIdToSpaceId.get(ev.id);\r\n        this.roomIdToSpaceId.delete(ev.id);\r\n\r\n        if (! spaceId) {\r\n            return;\r\n        }\r\n\r\n        const space = this.list.get(spaceId);\r\n        let spaceChanged = false;\r\n\r\n        this.rooms.get(spaceId)?.delete(ev.id);\r\n\r\n        if (space.systemRoom === ev.id) {\r\n            space.systemRoom = null;\r\n            spaceChanged = true;\r\n        }\r\n\r\n        if (space.defaultRooms.includes(ev.id)) {\r\n            space.defaultRooms = space.defaultRooms.filter(roomId => roomId !== ev.id);\r\n            spaceChanged = true;\r\n        }\r\n\r\n        if (spaceChanged) {\r\n            this.list.set(space);\r\n        }\r\n    }\r\n\r\n    private handleRoleDeleted(ev: RoleDeleted): void {\r\n        const collection = this.roles.get(ev.spaceId);\r\n        collection.delete(ev.id);\r\n        this.list.get(ev.spaceId).roles = collection.items;\r\n    }\r\n\r\n    private handleSpaceUpdated(ev: SpaceUpdated): void {\r\n        this.list.set(ev.space);\r\n    }\r\n\r\n    private handleSpaceDeleted(ev: SpaceDeleted | SpaceLeft): void {\r\n        const roomIds = this.rooms.get(ev.id)?.items.map(item => item.id) ?? [];\r\n        this.roomIdToSpaceId.delete(...roomIds);\r\n\r\n        this.roles.delete(ev.id);\r\n        this.members.delete(ev.id);\r\n        this.membersPromises.forget(ev.id);\r\n        this.rooms.delete(ev.id);\r\n        this.roomsPromises.forget(ev.id);\r\n        this.list.delete(ev.id);\r\n    }\r\n\r\n    private handleSpaceJoined(ev: SpaceJoined): void {\r\n        this.addJoinedSpaces(ev.space);\r\n    }\r\n\r\n    private addJoinedSpaces(...spaces: Space[]): void {\r\n        this.roles.set(...(spaces.map(space => [\r\n            space.id,\r\n            new ObservableIndexedObjectCollection<Role>('id', space.roles)\r\n        ]) as [string, ObservableIndexedObjectCollection<Role>][]));\r\n        this.list.set(...spaces);\r\n    }\r\n\r\n    private handleSpaceMemberJoined(ev: SpaceMemberJoined): void {\r\n        if (this.members.has(ev.spaceId)) {\r\n            this.members.get(ev.spaceId).set(ev.member);\r\n        }\r\n    }\r\n\r\n    private handleSpaceMemberLeft(ev: SpaceMemberLeft): void {\r\n        if (this.members.has(ev.spaceId)) {\r\n            this.members.get(ev.spaceId).delete(ev.userId);\r\n        }\r\n    }\r\n\r\n    private handleSpaceMembers(ev: SpaceMembers): void {\r\n        if (! this.members.has(ev.id)) {\r\n            this.members.set([\r\n                ev.id,\r\n                new ObservableIndexedObjectCollection(member => member?.user.id, ev.members)\r\n            ]);\r\n        }\r\n    }\r\n\r\n    private handleSpaceRooms(ev: SpaceRooms): void {\r\n        if (! this.rooms.has(ev.id)) {\r\n            this.rooms.set([ev.id, new ObservableIndexedObjectCollection('id', ev.summaries)]);\r\n            ev.summaries.forEach(summary => this.roomIdToSpaceId.set([summary.id, ev.id]));\r\n        }\r\n    }\r\n\r\n    private handleSpaceMemberUpdated(ev: SpaceMemberUpdated): void {\r\n        if (this.members.has(ev.spaceId)) {\r\n            const members = this.members.get(ev.spaceId);\r\n            const member = members.get(ev.userId);\r\n            members.set({...ev.member, user: member.user});\r\n        }\r\n    }\r\n\r\n    private handleRoleUpdated(ev: RoleUpdated): void {\r\n        const roles = this.roles.get(ev.spaceId);\r\n        const oldRole = roles.get(ev.role.id);\r\n        const newRole = ev.role;\r\n        const rolesToUpdate = [newRole];\r\n\r\n        if (oldRole.priority !== newRole.priority) {\r\n            rolesToUpdate.push(\r\n                ...reorderRolesOnPriorityUpdate(roles.items, oldRole, newRole)\r\n            );\r\n        }\r\n\r\n        this.roles.get(ev.spaceId).set(...rolesToUpdate);\r\n    }\r\n\r\n    private handleSession(ev: Session): void {\r\n        this.list.deleteAll();\r\n        this.roles.deleteAll();\r\n        this.rooms.deleteAll();\r\n        this.roomsPromises.forgetAll();\r\n        this.members.deleteAll();\r\n        this.membersPromises.forgetAll();\r\n        this.roomIdToSpaceId.deleteAll();\r\n\r\n        this.addJoinedSpaces(...ev.state.spaces);\r\n\r\n        this.deferredSession.resolve();\r\n    }\r\n\r\n    private handleUserUpdated(ev: UserUpdated): void {\r\n        this.members.items.forEach((members) => {\r\n            const member = members.get(ev.user.id);\r\n\r\n            if (! member) {\r\n                // Skip space; updated user is not here\r\n                return;\r\n            }\r\n\r\n            members.set({...member, user: ev.user});\r\n        });\r\n    }\r\n}","export enum Layer {\r\n    Global,\r\n    Space,\r\n    Room,\r\n    Topic,\r\n}\r\n\r\nexport class PermissionDefinition {\r\n    value: number;\r\n    maxLayer: Layer;\r\n}\r\n\r\nexport class Permissions {\r\n    public static readonly list = {\r\n        Root: {value: 1 << 0, maxLayer: Layer.Room},\r\n        CreateSpaces: {value: 1 << 1, maxLayer: Layer.Global},\r\n        ManageSpace: {value: 1 << 2, maxLayer: Layer.Space},\r\n        ManageSpaceRoles: {value: 1 << 3, maxLayer: Layer.Space},\r\n        ManageRoom: {value: 1 << 4, maxLayer: Layer.Room},\r\n        CreateTopics: {value: 1 << 5, maxLayer: Layer.Room},\r\n        ManageTopic: {value: 1 << 6, maxLayer: Layer.Topic},\r\n        ManageSpaceMembers: {value: 1 << 7, maxLayer: Layer.Space},\r\n        ManageRoomMembers: {value: 1 << 8, maxLayer: Layer.Room},\r\n        CreateMessages: {value: 1 << 9, maxLayer: Layer.Topic},\r\n        ManagePermissions: {value: 1 << 10, maxLayer: Layer.Topic},\r\n        CreateSpaceRooms: {value: 1 << 11, maxLayer: Layer.Space},\r\n        ManageSpaceRooms: {value: 1 << 12, maxLayer: Layer.Space},\r\n        CreateEmoticons: {value: 1 << 13, maxLayer: Layer.Space},\r\n        ManageEmoticon: {value: 1 << 14, maxLayer: Layer.Space},\r\n        ManageBan: {value: 1 << 15, maxLayer: Layer.Room},\r\n        Kick: {value: 1 << 16, maxLayer: Layer.Room},\r\n        ChangeOwnNick: {value: 1 << 17, maxLayer: Layer.Space},\r\n    };\r\n\r\n    public static getNames(): (keyof typeof this.list)[] {\r\n        return Object.keys(this.list) as any;\r\n    }\r\n\r\n    public static getByName(name: keyof typeof this.list): PermissionDefinition | undefined {\r\n        return this.list[name];\r\n    }\r\n\r\n    public static canBeDefinedOnLayer(permissionName: keyof typeof this.list, layer: Layer): boolean {\r\n        const def = this.getByName(permissionName);\r\n\r\n        if (! def) {\r\n            throw new Error(`Invalid permission name: ${permissionName}`);\r\n        }\r\n\r\n        return layer <= this.getByName(permissionName).maxLayer;\r\n    }\r\n}","import {ChatStateTracker} from \"./ChatStateTracker\";\r\nimport {\r\n    ChatLocation,\r\n    PermissionOverwrites, PermissionOverwritesTarget,\r\n    PermissionOverwritesUpdated,\r\n    PermissionOverwritesValue,\r\n    RoleDeleted,\r\n    RoomDeleted,\r\n    RoomLeft, RoomMember, RoomMemberUpdated, Session,\r\n    SpaceDeleted,\r\n    SpaceLeft, SpaceMember,\r\n    SpaceMemberUpdated,\r\n    TopicDeleted,\r\n} from \"../types/src\";\r\nimport {EventHandler, EventTarget} from \"../EventTarget\";\r\nimport {IndexedCollection} from \"../IndexedObjectCollection\";\r\nimport {Permissions} from \"../Permissions\";\r\nimport {PromiseRegistry} from \"./AsyncUtils\";\r\n\r\nconst getOvId = (\r\n    location: ChatLocation,\r\n    target?: PermissionOverwritesTarget,\r\n) => [location.spaceId, location.roomId, location.topicId, target?.type, target?.userId, target?.roleId].filter(Boolean).join('/');\r\n\r\nconst getOvIdByObject\r\n    = (overwrites: PermissionOverwrites | PermissionOverwritesUpdated): string => getOvId(overwrites.location, overwrites.target);\r\n\r\ninterface CheckPermissionsResult {\r\n    /**\r\n     * @deprecated Use `hasAll` instead.\r\n     */\r\n    ok: boolean;\r\n    hasAll: boolean;\r\n    hasAny: boolean;\r\n    missing: string[];\r\n}\r\n\r\nexport class PermissionsManager extends EventTarget {\r\n    private readonly overwrites = new IndexedCollection<string, PermissionOverwrites>();\r\n    private readonly overwritesPromises = new PromiseRegistry();\r\n\r\n    public constructor(private tracker: ChatStateTracker) {\r\n        super();\r\n        this.tracker.client.on('PermissionOverwrites', ev => this.handlePermissionOverwrites(ev));\r\n        this.tracker.client.on('PermissionOverwritesUpdated', ev => this.handlePermissionOverwrites(ev));\r\n        this.tracker.client.on('SpaceDeleted', ev => this.handleSpaceDeleted(ev));\r\n        this.tracker.client.on('SpaceLeft', ev => this.handleSpaceDeleted(ev));\r\n        this.tracker.client.on('RoomDeleted', ev => this.handleRoomDeleted(ev));\r\n        this.tracker.client.on('RoomLeft', ev => this.handleRoomDeleted(ev));\r\n        this.tracker.client.on('TopicDeleted', ev => this.handleTopicDeleted(ev));\r\n        this.tracker.client.on('RoleDeleted', ev => this.handleRoleDeleted(ev));\r\n        this.tracker.client.on('SpaceMemberUpdated', ev => this.handleSpaceMemberUpdated(ev));\r\n        this.tracker.client.on('RoomMemberUpdated', ev => this.handleRoomMemberUpdated(ev));\r\n        this.tracker.client.on('Session', ev => this.handleSession(ev));\r\n    }\r\n\r\n    public async getOverwrites(\r\n        location: ChatLocation,\r\n        target: PermissionOverwritesTarget,\r\n    ): Promise<PermissionOverwrites | undefined> {\r\n        this.validateLocation(location);\r\n\r\n        const id = getOvId(location, target);\r\n\r\n        if (this.overwritesPromises.notExist(id)) {\r\n            this.overwritesPromises.registerByFunction(async () => {\r\n                const result = await this.tracker.client.send(\r\n                    'GetPermissionOverwrites',\r\n                    {location, target},\r\n                );\r\n                if (result.error) {\r\n                    throw result.error;\r\n                }\r\n                this.handlePermissionOverwrites(result.data);\r\n            }, id);\r\n        }\r\n\r\n        await this.overwritesPromises.get(id);\r\n        return this.overwrites.get(id);\r\n    }\r\n\r\n    public on(eventName: 'change', handler: EventHandler<any>): this {\r\n        return super.on(eventName, handler);\r\n    }\r\n\r\n    public async check(\r\n        permissionNames: (keyof typeof Permissions.list)[],\r\n        location: ChatLocation,\r\n    ): Promise<CheckPermissionsResult> {\r\n        if (! permissionNames.length) {\r\n            throw new Error('Permission names array cannot be empty');\r\n        }\r\n\r\n        const ownedPermissions = await this.calculatePermissions(location);\r\n        const missing: string[] = [];\r\n\r\n        permissionNames.forEach(name => {\r\n            if (~ ownedPermissions & Permissions.getByName(name).value) {\r\n                missing.push(name as string);\r\n            }\r\n        });\r\n\r\n        return {\r\n            ok: missing.length === 0,\r\n            hasAll: missing.length === 0,\r\n            hasAny: missing.length < permissionNames.length,\r\n            missing,\r\n        };\r\n    }\r\n\r\n    public async calculatePermissions(location: ChatLocation): Promise<number> {\r\n        this.validateLocation(location);\r\n\r\n        const userId = (await this.tracker.getMe()).id;\r\n        const [spaceMember, roomMember] = await this.fetchMembersOrFail(location);\r\n        const userRoles: string[] = [...(spaceMember?.roles ?? []), ...(roomMember?.roles ?? [])];\r\n        const promises: Promise<PermissionOverwritesValue>[] = [\r\n            // Global user overwrites\r\n            this.getOverwrites({}, { type: 'User', userId }).then(v => v.overwrites),\r\n        ];\r\n\r\n        if (location.spaceId && (await this.tracker.spaces.get())?.has(location.spaceId)) {\r\n            const filterLocation: ChatLocation = {spaceId: location.spaceId};\r\n            promises.push(this.collectRoleOverwrites(filterLocation, userRoles));\r\n            promises.push(this.getOverwrites(filterLocation, { type: 'User', userId }).then(v => v.overwrites));\r\n        }\r\n\r\n        if (location.roomId && (await this.tracker.rooms.get())?.has(location.roomId)) {\r\n            const filterLocation: ChatLocation = {spaceId: location.spaceId, roomId: location.roomId};\r\n            if (userRoles.length) {\r\n                promises.push(this.collectRoleOverwrites(filterLocation, userRoles));\r\n            }\r\n            promises.push(this.getOverwrites(filterLocation, { type: 'User', userId }).then(v => v.overwrites));\r\n        }\r\n\r\n        if (location.topicId && (await this.tracker.rooms.getTopics(location.roomId))?.has(location.topicId)) {\r\n            if (userRoles.length) {\r\n                promises.push(this.collectRoleOverwrites(location, userRoles));\r\n            }\r\n            promises.push(this.getOverwrites(location, { type: 'User', userId }).then(v => v.overwrites));\r\n        }\r\n\r\n        return this.resolveOverwritesHierarchy(await Promise.all(promises));\r\n    }\r\n\r\n    private handlePermissionOverwrites(ev: PermissionOverwritesUpdated | PermissionOverwrites): void {\r\n        this.overwrites.set([getOvIdByObject(ev), ev]);\r\n        this.emit('change');\r\n    }\r\n\r\n    private handleSpaceDeleted(ev: SpaceDeleted | SpaceLeft): void {\r\n        const ids = this.deleteOverwritesByIdPrefix(getOvId({spaceId: ev.id}));\r\n        this.overwritesPromises.forget(...ids);\r\n    }\r\n\r\n    private async handleRoomDeleted(ev: RoomDeleted | RoomLeft): Promise<void> {\r\n        const room = (await this.tracker.rooms.get()).get(ev.id);\r\n        if (room) {\r\n            const ids = this.deleteOverwritesByIdPrefix(getOvId({spaceId: room.spaceId, roomId: room.id}));\r\n            this.overwritesPromises.forget(...ids);\r\n        }\r\n    }\r\n\r\n    private handleTopicDeleted(ev: TopicDeleted): void {\r\n        const ids = this.deleteOverwritesByIdPrefix(getOvId(ev.location));\r\n        this.overwritesPromises.forget(...ids);\r\n    }\r\n\r\n    private handleRoleDeleted(ev: RoleDeleted): void {\r\n        const ids = this.deleteOverwritesByIdPrefix(getOvId({spaceId: ev.spaceId}, { type: 'Role', roleId: ev.id }));\r\n        this.overwritesPromises.forget(...ids);\r\n    }\r\n\r\n    private handleSpaceMemberUpdated(ev: SpaceMemberUpdated): void {\r\n        if (ev.userId === this.tracker.me?.id) {\r\n            // User roles in space could potentially have changed\r\n            this.emit('change');\r\n        }\r\n    }\r\n\r\n    private handleRoomMemberUpdated(ev: RoomMemberUpdated): void {\r\n        if (ev.userId === this.tracker.me?.id) {\r\n            // User roles in room could potentially have changed\r\n            this.emit('change');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return Matched and deleted ids\r\n     */\r\n    private deleteOverwritesByIdPrefix(prefix: string): string[] {\r\n        const ids: string[] = [];\r\n        this.overwrites.items.forEach((overwrites) => {\r\n            const id = getOvIdByObject(overwrites);\r\n            if (id.startsWith(prefix)) {\r\n                ids.push(id);\r\n                this.overwrites.delete(id);\r\n            }\r\n        });\r\n        return ids;\r\n    }\r\n\r\n    private async collectRoleOverwrites(\r\n        location: ChatLocation,\r\n        userRoles: string[],\r\n    ): Promise<PermissionOverwritesValue> {\r\n        const roleOverwrites = await Promise.all(userRoles.map(\r\n            roleId => this.getOverwrites(location, { type: 'Role', roleId }),\r\n        ));\r\n\r\n        return this.resolveOverwritesFromRolesByOrder(location.spaceId, roleOverwrites);\r\n    }\r\n\r\n    private async resolveOverwritesFromRolesByOrder(\r\n        spaceId: string,\r\n        overwrites: PermissionOverwrites[],\r\n    ): Promise<PermissionOverwritesValue> {\r\n        let allows = 0, denies = 0;\r\n        const roles = await this.tracker.spaces.getRoles(spaceId);\r\n        const sortedOverwrites = overwrites.sort(\r\n            (a, b) =>\r\n                roles.get(a.target.roleId).priority - roles.get(b.target.roleId).priority\r\n        );\r\n\r\n        // Max length of bit word\r\n        const permissionsLength = overwrites.reduce(\r\n            (previousValue: number, currentValue: PermissionOverwrites) =>\r\n                Math.max(\r\n                    previousValue,\r\n                    currentValue.overwrites.allow?.toString(2).length ?? 0,\r\n                    currentValue.overwrites.deny?.toString(2).length ?? 0,\r\n                ),\r\n            0,\r\n        );\r\n\r\n        sortedOverwrites.forEach(overwriteEvent => {\r\n            const overwrites = overwriteEvent.overwrites;\r\n            const revDecDenies = overwrites.deny?.toString(2).split('').reverse().join('') ?? '';\r\n            const revDecAllows = overwrites.allow?.toString(2).split('').reverse().join('') ?? '';\r\n\r\n            for (let i = 0; i < permissionsLength; i++) {\r\n                const deny = parseInt(revDecDenies[i] ?? '0');\r\n                const allow = parseInt(revDecAllows[i] ?? '0');\r\n\r\n                if (deny) {\r\n                    denies |= 1 << i;\r\n                }\r\n\r\n                if (allow) {\r\n                    allows |= 1 << i;\r\n                }\r\n            }\r\n        });\r\n\r\n        return {allow: allows, deny: denies};\r\n    }\r\n\r\n    private resolveOverwritesHierarchy(permissionOverwritesValues: PermissionOverwritesValue[]): number {\r\n        let result = 0;\r\n\r\n        for (const value of permissionOverwritesValues) {\r\n            if (value.allow & Permissions.getByName('Root').value) {\r\n                return this.getRootAccessValue();\r\n            }\r\n\r\n            result = (result & ~value.deny) | value.allow;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private getRootAccessValue(): number {\r\n        let result = 0;\r\n\r\n        for (const name of Permissions.getNames()) {\r\n            result |= Permissions.getByName(name).value;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private async fetchMembersOrFail(location: ChatLocation): Promise<[SpaceMember | null, RoomMember | null]> {\r\n        const results = await Promise.all([\r\n            location.spaceId ? this.tracker.spaces.getMe(location.spaceId) : null,\r\n            location.roomId ? this.tracker.rooms.getMe(location.roomId) : null,\r\n        ]);\r\n\r\n        const spaceFail = location.spaceId && ! results[0];\r\n        const roomFail = location.roomId && ! results[1];\r\n\r\n        if (spaceFail || roomFail) {\r\n            const layer = spaceFail ? `space (${location.spaceId})` : `room (${location.roomId})`;\r\n            throw new Error(`Attempting to calculate permissions for a ${layer} that the user does not belong to`);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private validateLocation(location: ChatLocation): void {\r\n        if (location.topicId && ! location.roomId) {\r\n            throw new Error('Corrupted arguments hierarchy');\r\n        }\r\n    }\r\n\r\n    private handleSession(ev: Session): void {\r\n        this.overwrites.deleteAll();\r\n        this.overwritesPromises.forgetAll();\r\n    }\r\n}","import {ChatStateTracker} from \"./ChatStateTracker\";\r\nimport {\r\n    IndexedCollection,\r\n    ObservableIndexedObjectCollection\r\n} from \"../IndexedObjectCollection\";\r\nimport {Emoticon, EmoticonDeleted, Emoticons, NewEmoticon, SpaceDeleted} from \"../types/src\";\r\nimport {PromiseRegistry} from \"./AsyncUtils\";\r\n\r\nconst GLOBAL_KEY = 'global';\r\n\r\nexport class EmoticonsManager {\r\n    private list: IndexedCollection<string, ObservableIndexedObjectCollection<Emoticon>> = new IndexedCollection();\r\n    private emoticonsPromises = new PromiseRegistry();\r\n    \r\n    public constructor(private tracker: ChatStateTracker) {\r\n        this.tracker.client.on('Emoticons', ev => this.handleEmoticons(ev));\r\n        this.tracker.client.on('NewEmoticon', ev => this.handleNewEmoticon(ev));\r\n        this.tracker.client.on('EmoticonDeleted', ev => this.handleEmoticonDeleted(ev));\r\n        this.tracker.client.on('SpaceDeleted', ev => this.handleSpaceDeleted(ev));\r\n        this.tracker.client.on('Session', () => this.handleSession());\r\n    }\r\n\r\n    public async get(spaceId?: string): Promise<ObservableIndexedObjectCollection<Emoticon>> {\r\n        const key = spaceId ?? GLOBAL_KEY;\r\n\r\n        if (this.emoticonsPromises.notExist(key)) {\r\n            this.emoticonsPromises.registerByFunction(async () => {\r\n                const result = await this.tracker.client.send('GetEmoticons', {spaceId});\r\n                if (result.error) {\r\n                    throw result.error;\r\n                }\r\n                this.handleEmoticons(result.data);\r\n            }, key);\r\n        }\r\n\r\n        await this.emoticonsPromises.get(key);\r\n        return this.list.get(key);\r\n    }\r\n\r\n    private handleEmoticons(event: Emoticons): void {\r\n        const spaceId = event.location.spaceId ?? GLOBAL_KEY;\r\n\r\n        if (!this.list.has(spaceId)) {\r\n            this.list.set([spaceId, new ObservableIndexedObjectCollection<Emoticon>('id')]);\r\n        }\r\n\r\n        const collection = this.list.get(spaceId);\r\n        collection.set(...event.emoticons);\r\n    }\r\n\r\n    private handleNewEmoticon(ev: NewEmoticon): void {\r\n        const collection = this.list.get(ev.emoticon.spaceId ?? GLOBAL_KEY);\r\n        collection?.set(ev.emoticon);\r\n    }\r\n\r\n    private handleEmoticonDeleted(ev: EmoticonDeleted): void {\r\n        const collection = this.list.get(ev.spaceId ?? GLOBAL_KEY);\r\n        collection?.delete(ev.emoticonId);\r\n    }\r\n\r\n    private handleSpaceDeleted(event: SpaceDeleted): void {\r\n        this.list.delete(event.id);\r\n    }\r\n\r\n    private handleSession(): void {\r\n        this.list.deleteAll();\r\n        this.emoticonsPromises.forgetAll();\r\n    }\r\n}","import {ChatStateTracker} from \"./ChatStateTracker\";\nimport {ObservableIndexedObjectCollection} from \"../IndexedObjectCollection\";\nimport {RoomMember, Session, SpaceMember, User} from \"../types/src\";\nimport {extractUserFromMember} from \"./functions\";\nimport {EventTarget} from \"../EventTarget\";\n\nexport class UsersManager {\n    public readonly onlineStatus = new EventTarget();\n\n    private readonly users: ObservableIndexedObjectCollection<User> = new ObservableIndexedObjectCollection('id');\n\n    public constructor(private tracker: ChatStateTracker) {\n        // RoomMemberUpdated & SpaceMemberUpdated events are not contains user object\n        tracker.client.on('UserUpdated', event => this.handleUsers([event.user]));\n        tracker.client.on('RoomMemberJoined', event => this.handleMembers([event.member]));\n        tracker.client.on('SpaceMemberJoined', event => this.handleMembers([event.member]));\n        tracker.client.on('SpaceMembers', event => this.handleMembers(event.members));\n        tracker.client.on('RoomMembers', event => this.handleMembers(event.members));\n        tracker.client.on('Messages', event => this.handleUsers(event.messages.map(message => message.author.user)));\n        tracker.client.on('NewMessage', event => this.handleUsers([event.message.author.user]));\n        tracker.client.on('Session', event => this.handleSession(event));\n    }\n\n    /**\n     * Get all available (cached) user objects at once.\n     */\n    public async getAvailable(): Promise<ObservableIndexedObjectCollection<User>> {\n        return this.users;\n    }\n\n    private handleMembers(members: (RoomMember | SpaceMember)[]): void {\n        this.handleUsers(members.map(extractUserFromMember));\n    }\n\n    private handleSession(session: Session): void {\n        this.users.deleteAll();\n        this.handleUsers([session.user]);\n    }\n\n    private handleUsers(users: User[]): void {\n        users.forEach(newUser => {\n            const oldUser = this.users.get(newUser.id);\n            if (oldUser && oldUser.online !== newUser.online) {\n                this.onlineStatus.emit('change', newUser);\n            }\n        });\n\n        this.users.set(...users);\n    }\n}","import {ObservableIndexedObjectCollection} from \"../IndexedObjectCollection\";\nimport {\n    NewRelationship,\n    RelationshipDeleted,\n    Relationships,\n    UserRelationship,\n    UserRelationshipType\n} from \"../types/src\";\nimport {PromiseRegistry} from \"./AsyncUtils\";\nimport {ChatStateTracker} from \"./ChatStateTracker\";\n\nconst getId = (refUserId: string, type: UserRelationshipType): string => `${refUserId}-${type}`;\nconst getIdFromRelationship = (relationship: UserRelationship): string => getId(relationship.refUserId, relationship.type);\n\nexport class RelationshipsManager {\n    private relationships: ObservableIndexedObjectCollection<UserRelationship> = new ObservableIndexedObjectCollection<UserRelationship>(getIdFromRelationship);\n    private promises = new PromiseRegistry();\n\n    public constructor(private tracker: ChatStateTracker) {\n        this.tracker.client.on('Relationships', ev => this.handleRelationships(ev));\n        this.tracker.client.on('NewRelationship', ev => this.handleNewRelationship(ev));\n        this.tracker.client.on('RelationshipDeleted', ev => this.handleRelationshipDeleted(ev));\n        this.tracker.client.on('Session', () => this.handleSession());\n    }\n\n    public async get(): Promise<ObservableIndexedObjectCollection<UserRelationship>> {\n        if (this.promises.notExist('all')) {\n            this.promises.registerByFunction(async () => {\n                const result = await this.tracker.client.send('GetRelationships', {});\n                if (result.error) {\n                    throw result.error;\n                }\n            }, 'all');\n        }\n\n        await this.promises.get('all');\n        return this.relationships;\n    }\n\n    public async exists(refUserId: string, type: UserRelationshipType): Promise<boolean> {\n        await this.get();\n        return this.relationships.has(getId(refUserId, type));\n    }\n\n    private handleRelationships(ev: Relationships): void {\n        this.relationships.deleteAll();\n        ev.relationships.forEach(relationship => {\n            this.relationships.set(relationship);\n        });\n    }\n\n    private handleNewRelationship(ev: NewRelationship): void {\n        if (this.promises.has('all')) {\n            this.relationships.set(ev.relationship);\n        }\n    }\n\n    private handleRelationshipDeleted(ev: RelationshipDeleted): void {\n        if (this.promises.has('all')) {\n            this.relationships.delete(getIdFromRelationship(ev.relationship));\n        }\n    }\n\n    private handleSession(): void {\n        this.promises.forgetAll();\n        this.relationships.deleteAll();\n    }\n}","import {WebSocketChatClient} from \"../WebSocketChatClient\";\r\nimport {Session, User} from \"../types/src\";\r\nimport {RoomsManager} from \"./RoomsManager\";\r\nimport {SpacesManager} from \"./SpacesManager\";\r\nimport {PermissionsManager} from \"./PermissionsManager\";\r\nimport {DeferredTask} from \"./AsyncUtils\";\r\nimport {EmoticonsManager} from \"./EmoticonsManager\";\r\nimport {UsersManager} from \"./UsersManager\";\r\nimport {RelationshipsManager} from \"./RelationshipsManager\";\r\n\r\nexport class ChatStateTracker {\r\n    /**\r\n     * State of your permissions.\r\n     */\r\n    public readonly permissions = new PermissionsManager(this);\r\n\r\n    /**\r\n     * State of the rooms you are in.\r\n     */\r\n    public readonly rooms: RoomsManager = new RoomsManager(this);\r\n\r\n    /**\r\n     * State of the spaces you are in.\r\n     */\r\n    public readonly spaces = new SpacesManager(this);\r\n\r\n    /**\r\n     * State of the emoticons (global and space-related).\r\n     */\r\n    public readonly emoticons = new EmoticonsManager(this);\r\n\r\n    /**\r\n     * Users related state.\r\n     */\r\n    public readonly users = new UsersManager(this);\r\n\r\n    /**\r\n     * State of relationships with other users.\r\n     */\r\n    public readonly relationships = new RelationshipsManager(this);\r\n\r\n    private _me: User = null;\r\n    private readonly deferredSession = new DeferredTask();\r\n\r\n    public constructor(public readonly client: WebSocketChatClient) {\r\n        this.client.on('Session', ev => this.handleSession(ev));\r\n    }\r\n\r\n    public get me(): User | null {\r\n        return this._me;\r\n    }\r\n\r\n    public async getMe(): Promise<User> {\r\n        await this.deferredSession.promise;\r\n        return this._me;\r\n    }\r\n\r\n    private handleSession(ev: Session): void {\r\n        this._me = ev.user;\r\n        this.deferredSession.resolve();\r\n    }\r\n}","import {ObservableInterface} from \"./EventTarget\";\r\nimport {AbstractChatClient, CommandResult, CommandsMap} from \"./AbstractChatClient\";\r\nimport {ChatStateTracker} from \"./state-tracker/ChatStateTracker\";\r\nimport {Envelope} from \"./types/src\";\r\n\r\nexport interface WebSocketClientOptions {\r\n    url: string;\r\n    token: string;\r\n    connectingTimeoutMs?: number;\r\n    awaitQueueSendDelayMs?: number;\r\n    stateTracking?: boolean;\r\n    queryParams?: Record<string, string>;\r\n}\r\n\r\nenum WebSocketChatClientEvent {\r\n    connect = 'connect',\r\n    disconnect = 'disconnect',\r\n    message = 'message',\r\n    error = 'error',\r\n}\r\n\r\nexport class WebSocketChatClient extends AbstractChatClient implements ObservableInterface {\r\n    public readonly Event = WebSocketChatClientEvent;\r\n    public readonly state?: ChatStateTracker;\r\n\r\n    protected ws: WebSocket|null = null;\r\n    protected sendQueue: Envelope[] = [];\r\n    protected connectingTimeoutId: any;\r\n    protected authenticated: boolean;\r\n    protected authenticatedResolvers: [() => void, (error: Error) => void];\r\n\r\n    public constructor(private readonly options: WebSocketClientOptions) {\r\n        super();\r\n        if (this.options.stateTracking ?? true) {\r\n            this.state = new ChatStateTracker(this);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        const params = new URLSearchParams(this.options.queryParams ?? {});\r\n        params.set('token', this.options.token);\r\n\r\n        this.ws = new WebSocket(`${this.options.url}?${params}`);\r\n        this.ws.onclose = ev => this.onClose(ev);\r\n        this.ws.onmessage = ev => this.onMessage(ev);\r\n        this.connectingTimeoutId = setTimeout(\r\n            () => this.triggerConnectionTimeout(),\r\n            this.options.connectingTimeoutMs ?? 10000\r\n        );\r\n        this.authenticated = false;\r\n\r\n        return new Promise((...args) => this.authenticatedResolvers = args);\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this.sendQueue = [];\r\n        this.ws?.close();\r\n        this.ws = null;\r\n    }\r\n\r\n    public async send<CommandType extends keyof CommandsMap>(commandType: CommandType, commandData: CommandsMap[CommandType][0]):\r\n       Promise<CommandResult<CommandsMap[CommandType][1]>> {\r\n        if (!this.ws || [this.ws.CLOSED, this.ws.CLOSING].includes(this.ws.readyState)) {\r\n            throw new Error('Cannot send; close or closing connection state');\r\n        }\r\n\r\n        const envelope = this.createEnvelope<CommandsMap[CommandType][0]>(commandType, commandData);\r\n        const promise = this.createPromiseFromCommandEnvelope<CommandType>(envelope);\r\n\r\n        if (this.ws.readyState === this.ws.CONNECTING || !this.authenticated) {\r\n            this.sendQueue.push(envelope);\r\n            return promise;\r\n        }\r\n\r\n        if (this.ws.readyState !== this.ws.OPEN) {\r\n            throw new Error(`Invalid websocket state=${this.ws.readyState}`);\r\n        }\r\n\r\n        this.sendEnvelope(envelope);\r\n        return promise;\r\n    }\r\n\r\n    private sendEnvelope(envelope: Envelope): void {\r\n        this.ws.send(JSON.stringify(envelope));\r\n    }\r\n\r\n    private onMessage(event: MessageEvent): void {\r\n        const envelope: Envelope = JSON.parse(event.data);\r\n        this.handleIncomingEnvelope(envelope);\r\n        this.emit(envelope.type, envelope.data);\r\n        this.emit(this.Event.message, envelope);\r\n\r\n        // Login successfully\r\n        if (!this.authenticated) {\r\n            const isAuthenticated = envelope.type !== 'Bye';\r\n            this.authenticated = isAuthenticated;\r\n            if (isAuthenticated) {\r\n                this.authenticatedResolvers[0]();\r\n                this.emit(this.Event.connect);\r\n                this.sendFromQueue();\r\n            } else {\r\n                this.authenticatedResolvers[1](envelope.data);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onClose(event: CloseEvent): void {\r\n        clearTimeout(this.connectingTimeoutId);\r\n        const reconnect = event.code !== 1000; // Connection was closed because of error\r\n        if (reconnect) {\r\n            this.connect();\r\n        }\r\n        this.emit(this.Event.disconnect, reconnect);\r\n    }\r\n\r\n    private sendFromQueue(): void {\r\n        // Send awaiting data to server\r\n        let lastDelay = 0;\r\n        for (const dataIndex in this.sendQueue) {\r\n            const envelope = this.sendQueue[dataIndex];\r\n            setTimeout(() => this.sendEnvelope(envelope), lastDelay);\r\n            lastDelay += this.options.awaitQueueSendDelayMs ?? 500;\r\n        }\r\n        this.sendQueue = [];\r\n        clearTimeout(this.connectingTimeoutId);\r\n    }\r\n\r\n    private triggerConnectionTimeout(): void {\r\n        this.disconnect();\r\n        this.emit(this.Event.error, new Error('Connection timeout'));\r\n    }\r\n}","import {AbstractChatClient, CommandResult, CommandsMap} from \"./AbstractChatClient\";\r\nimport {ObservableInterface} from \"./EventTarget\";\r\nimport {Envelope} from \"./types/src\";\r\n\r\nexport interface WebApiChatClientOptions {\r\n    url: string;\r\n    token: string;\r\n    attemptsToSend?: number;\r\n    attemptDelayMs?: number;\r\n    queryParams?: Record<string, string>;\r\n}\r\n\r\nenum WebApiChatClientEvent {\r\n    message = 'message',\r\n    error = 'error',\r\n    destroy = 'destroy',\r\n}\r\n\r\nexport class WebApiChatClient extends AbstractChatClient implements ObservableInterface {\r\n    public readonly Event = WebApiChatClientEvent;\r\n\r\n    protected sendStack: {data: any, attempts: number, lastTimeoutId: any}[];\r\n\r\n    public constructor(private readonly options: WebApiChatClientOptions) {\r\n        super();\r\n    }\r\n\r\n    public async send<CommandType extends keyof CommandsMap>(commandType: CommandType, commandData: CommandsMap[CommandType][0]):\r\n        Promise<CommandResult<CommandsMap[CommandType][1]>> {\r\n        const envelope = this.createEnvelope(commandType, commandData);\r\n        this.sendStack.push({data: envelope, attempts: 0, lastTimeoutId: null});\r\n        this.makeApiCall(this.sendStack.length - 1);\r\n        return this.createPromiseFromCommandEnvelope(envelope);\r\n    }\r\n\r\n    public destroy(): void {\r\n        // Cancel all awaiting requests\r\n        this.sendStack.forEach(item => {\r\n            if (item.lastTimeoutId) {\r\n                clearTimeout(item.lastTimeoutId);\r\n            }\r\n            this.awaitingResponse.delete(item.data.ref);\r\n        });\r\n        this.sendStack = [];\r\n        this.emit(this.Event.destroy, false);\r\n    }\r\n\r\n    protected async onMessage(reqId: number, response: Response): Promise<void> {\r\n        this.sendStack.splice(reqId, 1);\r\n        const envelope: Envelope = await response.json();\r\n        this.handleIncomingEnvelope(envelope);\r\n        this.emit(envelope.type, envelope.data);\r\n        this.emit(this.Event.message, envelope);\r\n    }\r\n\r\n    protected onError(reqId: number, body: string): void {\r\n        if (this.sendStack[reqId].attempts >= (this.options.attemptsToSend ?? 10)) {\r\n            this.sendStack.splice(reqId, 1);\r\n            this.handleEnvelopeSendError(this.sendStack[reqId].data, new Error(\r\n                `Cannot send ${body}; aborting after reaching the maximum connection errors`\r\n            ));\r\n            return;\r\n        }\r\n        this.sendStack[reqId].lastTimeoutId = setTimeout(\r\n            () => this.makeApiCall(reqId),\r\n            this.options.attemptDelayMs ?? 3000\r\n        );\r\n    }\r\n\r\n    protected makeApiCall(reqId: number): void {\r\n        this.sendStack[reqId].attempts++;\r\n        const bodyJson = JSON.stringify(this.sendStack[reqId].data);\r\n        const headers: any = {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json'\r\n        };\r\n\r\n        headers.Authorization = `Bearer ${this.options.token}`;\r\n\r\n        const params = new URLSearchParams(this.options.queryParams ?? {});\r\n        const url = `${this.options.url}${params ? '?' + params : ''}`;\r\n\r\n        fetch(url, {\r\n            headers,\r\n            body: bodyJson,\r\n            method: 'POST',\r\n        })\r\n            .then(response => this.onMessage(reqId, response))\r\n            .catch(() => this.onError(reqId, bodyJson));\r\n    }\r\n}","export interface RestClientOptions {\r\n    url?: string;\r\n    token: string;\r\n}\r\n\r\nexport interface RestClientResponse<T> {\r\n    ok: boolean;\r\n    status: number;\r\n    data: T;\r\n}\r\n\r\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\r\n\r\nexport abstract class AbstractRestClient {\r\n    protected abstract defaultUrl: string;\r\n\r\n    public constructor(\r\n        private readonly options: RestClientOptions,\r\n    ) {}\r\n\r\n    protected async send<ResponseT = any>(\r\n        method: HttpMethod,\r\n        uri: string,\r\n        data: any = undefined\r\n    ): Promise<RestClientResponse<ResponseT>> {\r\n        let url = this.getUrl(uri);\r\n        let body = undefined;\r\n\r\n        if (data) {\r\n            if (['GET', 'DELETE'].includes(method)) {\r\n                url += new URLSearchParams(data).toString()\r\n            } else {\r\n                body = JSON.stringify(data);\r\n            }\r\n        }\r\n\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            ...this.getAuthHeaders(),\r\n        };\r\n\r\n        const result = await fetch(url, {method, body, headers});\r\n\r\n        return this.convertFetchResponse(result);\r\n    }\r\n\r\n    protected getAuthHeaders(): any {\r\n        const headers = {} as any;\r\n\r\n        if (this.options.token) {\r\n            headers.Authorization = `Bearer ${this.options.token}`;\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    protected getUrl(uri: string): string {\r\n        return this.removeEndingSlash(this.options.url ?? this.defaultUrl) + '/' + this.removeStartingSlash(uri);\r\n    }\r\n\r\n    protected async convertFetchResponse<T>(result: Response): Promise<RestClientResponse<T>> {\r\n        return {\r\n            ok: result.ok,\r\n            status: result.status,\r\n            data: result.headers.get('content-type')?.includes('json') ? await result.json() : await result.text(),\r\n        };\r\n    }\r\n\r\n    private removeStartingSlash(text: string): string {\r\n        return text.replace(/^\\/+/, '');\r\n    }\r\n\r\n    private removeEndingSlash(text: string): string {\r\n        return text.replace(/\\/+$/, '');\r\n    }\r\n}","import {AbstractRestClient} from \"./AbstractRestClient\";\r\n\r\nexport interface TokenInterface {\r\n    token: string,\r\n    expiration: string\r\n}\r\n\r\nexport interface MyAccountInterface {\r\n    id: string;\r\n    nick: string;\r\n    avatar: string;\r\n}\r\n\r\nexport class AuthClient extends AbstractRestClient {\r\n    protected defaultUrl: string = 'https://polfan.pl/webservice/api';\r\n\r\n    public static async createToken(\r\n        login: string,\r\n        password: string,\r\n        clientName: string = 'pserv-js-client'\r\n    ): Promise<TokenInterface> {\r\n        const response = await new AuthClient({token: null}).send('POST', 'auth/tokens', {\r\n            login, password, client_name: clientName\r\n        });\r\n        if (response.ok) {\r\n            return response.data;\r\n        }\r\n        throw new Error(`Cannot create user token: ${response.data.errors[0]}`);\r\n    }\r\n\r\n    public async deleteToken(token: string): Promise<void> {\r\n        const response = await this.send('DELETE', `auth/tokens/${token}`);\r\n        if (!response.ok) {\r\n            throw new Error(`Cannot delete access token: ${response.data.errors[0]}`);\r\n        }\r\n    }\r\n\r\n    public async getMe(): Promise<MyAccountInterface> {\r\n        const response = await this.send('GET', 'auth/me');\r\n        if (response.ok) {\r\n            response.data.id = response.data.id.toString();\r\n            return response.data;\r\n        }\r\n        throw new Error(`Cannot get current user account: ${response.data.errors[0]}`);\r\n    }\r\n}","import {AbstractRestClient, RestClientResponse} from \"./AbstractRestClient\";\r\n\r\nexport interface File {\r\n    id: string;\r\n    url: string;\r\n    name: string;\r\n    mime: string;\r\n    size: number;\r\n    width?: number;\r\n    height?: number;\r\n}\r\n\r\nexport class FilesClient extends AbstractRestClient {\r\n    protected defaultUrl: string = 'https://files.devana.pl';\r\n\r\n    public async uploadFile(file: globalThis.File | Blob): Promise<RestClientResponse<File>> {\r\n        const name = encodeURIComponent((file as globalThis.File).name ?? '');\r\n        let headers = {\r\n            ...this.getAuthHeaders(),\r\n            Accept: 'application/json',\r\n            'Content-Disposition': `attachment; filename=\"${name}\"`,\r\n            'Content-Length': file.size\r\n        };\r\n\r\n        const response = await fetch(this.getUrl('files'), {\r\n            method: 'POST',\r\n            body: file,\r\n            headers\r\n        });\r\n\r\n        return this.convertFetchResponse<File>(response);\r\n    }\r\n\r\n    public async getFileMeta(id: string): Promise<RestClientResponse<File>> {\r\n        return this.send('GET', 'files/' + id);\r\n    }\r\n\r\n    public async getFileMetaBulk(ids: string[]): Promise<RestClientResponse<File[]>> {\r\n        const searchParams = new URLSearchParams();\r\n        ids.forEach(id => searchParams.append('id[]', id));\r\n        return this.send('GET', 'files?' + searchParams);\r\n    }\r\n}"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","EventTarget","constructor","_defineProperty","Map","on","eventName","handler","addHandler","events","once","onceEvents","off","_this$events$get","index","indexOf","splice","emit","event","callHandlers","delete","map","_map$get","handlers","push","set","_map$get2","forEach","callback","AbstractChatClient","arguments","super","createEnvelope","type","data","ref","sentCounter","toString","createPromiseFromCommandEnvelope","envelope","_this","Promise","_len","length","args","Array","_key","awaitingResponse","handleIncomingEnvelope","has","isError","error","handleEnvelopeSendError","IndexedCollection","items","undefined","mutationCounter","_mutationCounter","_items","size","item","id","_len2","ids","_key2","deleteAll","clear","findBy","field","valueToFind","limit","result","entries","next","done","IndexedObjectCollection","from","values","_len3","_key3","getId","getAt","ObservableIndexedCollection","eventTarget","_len4","_key4","setItems","_len5","_key5","deletedItems","keys","ObservableIndexedObjectCollection","_len6","_key6","_len7","_key7","DeferredTask","promise","resolve","PromiseRegistry","register","promises","registerByFunction","fn","notExist","forget","forgetAll","WindowState","TraversableRemoteCollection","LIVE","state","currentState","hasLatest","LATEST","includes","hasOldest","OLDEST","oldestId","resetToLatest","_asyncToGenerator","fetchingState","fetchLatestItems","addItems","fetchPrevious","_this2","PAST","fetchItemsBefore","firstItem","refreshFetchedState","fetchNext","_this3","fetchItemsAfter","_this4","isLatestItemLoaded","newItems","to","trimItemsArrayToLimit","slice","TopicHistoryWindow","roomId","topicId","tracker","client","ev","handleSession","handleNewMessage","_updateMessageReference","refTopic","refMessage","_objectSpread","topicRef","_this5","message","location","rooms","find","room","_this6","_this6$getAt","afterId","send","after","Error","concat","messages","_this7","_this7$getAt","beforeId","before","_this8","getTopic","_this9","getTopics","getLatestMessageId","_this0","_yield$_this0$getTopi","_yield$_this0$getTopi2","lastMessage","_this1","lastMessageId","RoomMessagesHistory","handleRoomUpdated","handleNewTopic","handleTopicDeleted","defaultTopic","createHistoryWindowForTopic","getMessagesWindow","historyWindows","topic","refHistoryWindow","MessagesManager","handleRoomJoin","handleFollowedTopicUpdated","handleTopicFollowed","handleTopicUnfollowed","handleRoomDeleted","handleRoomLeft","getRoomHistory","deferredSession","roomHistories","cacheSpaceFollowedTopics","spaceId","spaces","roomIds","resultPromise","followedTopicsPromises","setFollowedTopicsArray","followedTopics","getRoomFollowedTopics","ackRoomFollowedTopics","collection","followedTopic","missed","calculateRoomMissedMessages","reduce","previousValue","currentValue","_currentValue$missed","_deleteByTopicIds","_this$followedTopics$","topicIds","createHistoryForNewRoom","updateLocallyFollowedTopicOnNewMessage","_this$followedTopics$2","_this$followedTopics$3","clearRoomFollowedTopicsStructures","_this$followedTopics$4","_this$tracker$me","update","roomFollowedTopics","author","user","me","lastAckMessageId","roomToTopics","_followedTopic$locati","_roomToTopics$_follow","RoomsManager","handleRoomJoined","handleTopicUpdated","handleRoomMemberJoined","handleRoomMemberLeft","handleRoomMembers","handleRoomMemberUpdated","handleSpaceMemberLeft","handleSpaceMemberUpdated","handleSpaceDeleted","handleUserUpdated","getMembers","membersPromises","members","getMe","userId","list","member","_member$user$id","_member$user","spaceMember","tryToFetchTopicIds","idsToFetch","filter","_this4$topics$get","topics","topicsPromises","then","_this4$topics$get2","deleteRoom","_this$topics$get$item","_this$topics$get","deleteRoomsBySpaceId","roomMembers","roomMember","_this$members$get","_member$spaceMember$u","_member$spaceMember","newMember","_room$defaultTopic","addJoinedRoomTopics","addJoinedRooms","_this$topics$get2","recipients","roles","_member$user$id2","_member$user2","_room$defaultTopic2","newTopic","messageCount","extractUserFromMember","_spaceMember","SpacesManager","handleNewRoom","handleSpaceUpdated","handleSpaceJoined","handleSpaceMemberJoined","handleSpaceMembers","handleSpaceRooms","handleNewRole","handleRoleDeleted","handleRoleUpdated","getRoles","getRooms","roomsPromises","role","_this$rooms$get","summary","roomIdToSpaceId","name","description","_this6$rooms$get","space","spaceChanged","systemRoom","defaultRooms","_this$rooms$get$items","_this$rooms$get2","addJoinedSpaces","summaries","oldRole","newRole","rolesToUpdate","priority","allRoles","updatedRole","increased","decreased","changedRoles","reorderRolesOnPriorityUpdate","Layer","PermissionDefinition","Permissions","permissionName","layer","getByName","maxLayer","Root","Room","CreateSpaces","Global","ManageSpace","Space","ManageSpaceRoles","ManageRoom","CreateTopics","ManageTopic","Topic","ManageSpaceMembers","ManageRoomMembers","CreateMessages","ManagePermissions","CreateSpaceRooms","ManageSpaceRooms","CreateEmoticons","ManageEmoticon","ManageBan","Kick","ChangeOwnNick","getOvId","target","roleId","Boolean","join","getOvIdByObject","overwrites","PermissionsManager","handlePermissionOverwrites","getOverwrites","validateLocation","overwritesPromises","check","permissionNames","ownedPermissions","calculatePermissions","missing","ok","hasAll","hasAny","_spaceMember$roles","_roomMember$roles","_yield$_this3$tracker","_yield$_this3$tracker2","_yield$_this3$tracker3","fetchMembersOrFail","userRoles","v","filterLocation","collectRoleOverwrites","resolveOverwritesHierarchy","all","deleteOverwritesByIdPrefix","_this$tracker$me2","prefix","startsWith","roleOverwrites","resolveOverwritesFromRolesByOrder","allows","denies","sortedOverwrites","sort","a","b","permissionsLength","_currentValue$overwri","_currentValue$overwri2","_currentValue$overwri3","_currentValue$overwri4","Math","max","allow","deny","overwriteEvent","_overwrites$deny$toSt","_overwrites$deny","_overwrites$allow$toS","_overwrites$allow","revDecDenies","split","reverse","revDecAllows","i","_revDecDenies$i","_revDecAllows$i","parseInt","permissionOverwritesValues","getRootAccessValue","getNames","results","spaceFail","roomFail","GLOBAL_KEY","EmoticonsManager","handleEmoticons","handleNewEmoticon","handleEmoticonDeleted","emoticonsPromises","_event$location$space","emoticons","_ev$emoticon$spaceId","emoticon","_ev$spaceId","emoticonId","UsersManager","handleUsers","handleMembers","getAvailable","users","session","newUser","oldUser","online","onlineStatus","refUserId","getIdFromRelationship","relationship","RelationshipsManager","handleRelationships","handleNewRelationship","handleRelationshipDeleted","relationships","exists","ChatStateTracker","_me","WebSocketChatClientEvent","WebSocketChatClient","options","_this$options$stateTr","stateTracking","connect","_this$options$queryPa","_this$options$connect","params","URLSearchParams","queryParams","token","ws","WebSocket","url","onclose","onClose","onmessage","onMessage","connectingTimeoutId","setTimeout","triggerConnectionTimeout","connectingTimeoutMs","authenticated","authenticatedResolvers","disconnect","_this$ws","sendQueue","close","commandType","commandData","CLOSED","CLOSING","readyState","CONNECTING","OPEN","sendEnvelope","JSON","stringify","parse","Event","isAuthenticated","sendFromQueue","clearTimeout","reconnect","code","lastDelay","_loop","dataIndex","_this3$options$awaitQ","awaitQueueSendDelayMs","WebApiChatClientEvent","WebApiChatClient","sendStack","attempts","lastTimeoutId","makeApiCall","destroy","reqId","response","json","onError","body","_this$options$attempt","_this$options$attempt2","attemptsToSend","attemptDelayMs","bodyJson","headers","Accept","Authorization","fetch","method","catch","AbstractRestClient","uri","_arguments","getUrl","getAuthHeaders","convertFetchResponse","_this$options$url","removeEndingSlash","defaultUrl","removeStartingSlash","_result$headers$get","status","text","replace","AuthClient","login","password","clientName","client_name","errors","deleteToken","FilesClient","uploadFile","file","_name","encodeURIComponent","getFileMeta","getFileMetaBulk","searchParams","append"],"sourceRoot":""}